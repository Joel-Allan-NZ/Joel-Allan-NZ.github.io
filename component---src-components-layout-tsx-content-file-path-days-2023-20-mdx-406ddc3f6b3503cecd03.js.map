{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2023-20-mdx-406ddc3f6b3503cecd03.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2023/20.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    em: \"em\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Another pretty straight-forward part one. Model the system, press the button, count the pulse, return an answer.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Given that this look suspiciously like a program of some type being executed (logic\\ngates), part 2 is probably going to be a nightmare ðŸ˜†\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export function partOne(input: string[]): number | string {\\n  var modules = parse(input)\\n  const pulses = [0, 0]\\n\\n  for (let i = 0; i < 1000; i++) {\\n    const result = buttonPulses(modules, i)\\n    pulses[0] += result[0]\\n    pulses[1] += result[1]\\n  }\\n\\n  return pulses[0] * pulses[1]\\n}\\n\\ninterface Module {\\n  type: string\\n  name: string\\n  connections: string[]\\n  high: boolean\\n  inputs: Map<string, boolean> | undefined\\n}\\n\\ninterface Pulse {\\n  high: boolean\\n  origin: string\\n  destination: string\\n}\\n\\nfunction parse(input: string[]): Map<string, Module> {\\n  const modules = new Map<string, Module>()\\n  const outputOnly = new Set<string>()\\n\\n  input.forEach((line) => {\\n    const split = line.split(/\\\\, | /)\\n    const type = split[0][0]\\n    const name = type == 'b' ? split[0] : split[0].slice(1)\\n    modules.set(name, {\\n      type,\\n      name,\\n      connections: split.slice(2),\\n      high: false,\\n      inputs: undefined,\\n    })\\n  })\\n\\n  modules.entries().forEach((kvp) => {\\n    if (kvp[1].type == '&') {\\n      kvp[1].inputs = new Map<string, boolean>()\\n      modules.values().forEach((value) => {\\n        if (value.connections.includes(kvp[0]))\\n          kvp[1].inputs!.set(value.name, false)\\n      })\\n    }\\n    kvp[1].connections.forEach((connection) => {\\n      if (!modules.has(connection)) outputOnly.add(connection)\\n    })\\n  })\\n\\n  outputOnly.forEach((name) =>\\n    modules.set(name, {\\n      type: 'b',\\n      name,\\n      connections: [],\\n      high: true,\\n      inputs: undefined,\\n    })\\n  )\\n\\n  return modules\\n}\\n\\nfunction buttonPulses(\\n  modules: Map<string, Module>,\\n  presses: number,\\n  monitoring: Map<string, number> | undefined = undefined\\n): number[] {\\n  let queue: Pulse[] = []\\n  const pulses = [1, 0]\\n  queue.push({ high: false, origin: 'button', destination: 'broadcaster' })\\n\\n  while (queue.length > 0) {\\n    const pulse = queue.shift()!\\n    const destination = modules.get(pulse.destination)!\\n\\n    if (monitoring && pulse.high && monitoring.has(pulse.origin))\\n      if (monitoring.get(pulse.origin) == -1)\\n        monitoring.set(pulse.origin, presses)\\n\\n    handlePulse(destination, pulse, pulses, queue)\\n  }\\n  return pulses\\n}\\n\\nfunction handlePulse(\\n  destination: Module,\\n  pulse: Pulse,\\n  pulses: number[],\\n  next: Pulse[]\\n): void {\\n  if (destination.type == '%') {\\n    if (!pulse.high) {\\n      destination.high = !destination.high\\n      countPulses(destination.high, destination.connections.length, pulses)\\n\\n      destination.connections.forEach((connection) =>\\n        next.push({\\n          high: destination.high,\\n          origin: destination.name,\\n          destination: connection,\\n        })\\n      )\\n    }\\n  } else if (destination.type == '&') {\\n    destination.inputs!.set(pulse.origin, pulse.high)\\n    const output = destination.inputs!.values().some((x) => !x)\\n    countPulses(output, destination.connections.length, pulses)\\n\\n    destination.connections.forEach((connection) =>\\n      next.push({\\n        high: output,\\n        origin: destination.name,\\n        destination: connection,\\n      })\\n    )\\n  } else {\\n    pulses[0] += destination.connections.length\\n    destination.connections.forEach((connection) =>\\n      next.push({\\n        high: false,\\n        origin: destination.name,\\n        destination: connection,\\n      })\\n    )\\n  }\\n}\\n\\nfunction countPulses(high: boolean, length: number, pulses: number[]) {\\n  if (high) pulses[1] += length\\n  else pulses[0] += length\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    var modules = Parse(Input);\\n    long[] pulses = [0, 0];\\n    for (int i = 0; i < 1000; i++)\\n    {\\n        var pulseResult = ButtonPulses(modules, i);\\n        pulses[0] += pulseResult[0];\\n        pulses[1] += pulseResult[1];\\n    }\\n    return pulses[0] * pulses[1];\\n}\\n\\nprivate static Dictionary<string, Module> Parse(string[] input)\\n{\\n    Dictionary<string, Module> modules = [];\\n    HashSet<string> outputOnly = [];\\n\\n    foreach (var line in input)\\n    {\\n        var split = line.Split([' ', ','], StringSplitOptions.RemoveEmptyEntries);\\n        var type = split[0][0];\\n        var name = type == 'b' ? split[0] : split[0][1..];\\n        modules.Add(name, new(type, name, split[2..], false));\\n    }\\n\\n    foreach (var kvp in modules)\\n    {\\n        if (kvp.Value.Type == '&')\\n        {\\n            foreach (var value in modules.Values)\\n            {\\n                if (value.Connections.Contains(kvp.Key))\\n                    kvp.Value.Inputs.Add(value.Name, false);\\n            }\\n        }\\n        foreach (var value in kvp.Value.Connections)\\n        {\\n            if (!modules.ContainsKey(value))\\n                outputOnly.Add(value);\\n        }\\n    }\\n\\n    foreach (var v in outputOnly)\\n        modules.Add(v, new('b', v, [], true));\\n\\n    return modules;\\n}\\n\\nprivate static long[] ButtonPulses(Dictionary<string, Module> modules, int presses, Dictionary<string, long>? monitoring = null)\\n{\\n    Queue<Pulse> queue = [];\\n    long[] pulses = [1, 0];\\n    queue.Enqueue(new(false, \\\"button\\\", \\\"broadcaster\\\"));\\n    while (queue.Count > 0)\\n    {\\n        var pulse = queue.Dequeue();\\n        var destination = modules[pulse.Destination];\\n\\n        if (monitoring != null && pulse.High && monitoring.ContainsKey(pulse.Origin))\\n        {\\n            if (monitoring[pulse.Origin] == -1)\\n                monitoring[pulse.Origin] = presses;\\n        }\\n\\n        HandlePulse(destination, pulse, pulses, queue);\\n    }\\n    return pulses;\\n}\\n\\nprivate static void HandlePulse(Module destination, Pulse pulse, long[] pulses, Queue<Pulse> nextPulses)\\n{\\n    if (destination.Type == '%')\\n    {\\n        if (!pulse.High)\\n        {\\n            destination.Value = !destination.Value;\\n            countPulses(destination.Value, destination.Connections.Length, pulses);\\n\\n            foreach (var connection in destination.Connections)\\n                nextPulses.Enqueue(new(destination.Value, destination.Name, connection));\\n        }\\n    }\\n    else if (destination.Type == '&')\\n    {\\n        destination.Inputs[pulse.Origin] = pulse.High;\\n        var output = destination.Inputs.Values.Any(x => !x);\\n        countPulses(output, destination.Connections.Length, pulses);\\n\\n        foreach (var connection in destination.Connections)\\n            nextPulses.Enqueue(new(output, destination.Name, connection));\\n    }\\n    else\\n    {\\n        pulses[0] += destination.Connections.Length;\\n        foreach (var connection in destination.Connections)\\n            nextPulses.Enqueue(new(false, destination.Name, connection));\\n    }\\n\\n    static void countPulses(bool high, long length, long[] pulses)\\n    {\\n        if (high) pulses[1] += length;\\n        else pulses[0] += length;\\n    }\\n}\\n\\ninternal class Pulse(bool high, string origin, string destination)\\n{\\n    internal bool High = high;\\n    internal string Origin = origin;\\n    internal string Destination = destination;\\n}\\n\\ninternal class Module(char type, string name, string[] connections, bool value)\\n{\\n    internal char Type = type;\\n    internal string Name = name;\\n    internal string[] Connections = connections;\\n    internal bool Value = value;\\n    internal Dictionary<string, bool> Inputs = [];\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"Dire predictions aside, this one wasn't too bad!\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Attempting to use the same approach as part one quickly proved not to scale realistically,\\nso the new idea is to find when pulses are fed to the grandparents of the target\\nmodule, and use them to find the first time that a high pulse could be sent to \", React.createElement(_components.code, null, \"rx\"), \".\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"This approach is built on a \", React.createElement(_components.em, null, \"number\"), \" of assumptions.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"All inputs are structured with a single \", React.createElement(_components.code, null, \"&\"), \" parent leading into \", React.createElement(_components.code, null, \"rx\"), \". There's no direct evidence to support this, but problem inputs are intended to be similarly difficult. Therefore we can be reasonably confident on this.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"The system cycles. Again, no obvious direct evidence from the clue or input, but we can reason that it's likely. Emperically demonstrated with a valid answer based on that underlying assumption.\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(_components.p, null, \"The inputs to \", React.createElement(_components.code, null, \"rx\"), \"'s parent will have prime-number length cycles. This proved to be true for my input, but it's possible (though unlikely IMO) that there are inputs that do not have prime length cycles. For those inputs finding the \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Least_common_multiple\"\n  }, \"LCM\"), \" of parent cycles would be required.\"), \"\\n\"), \"\\n\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"If those assumptions prove to be incorrect for your input then this will fail for\\nyou, but in my opinion that's unlikely. Good luck!\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const modules = parse(input)\\n  const grandParentHigh = new Map<string, number>()\\n  const rxParents = modules.values().filter((x) => x.connections.includes('rx'))\\n\\n  rxParents.forEach((parent) =>\\n    parent.inputs?.keys().forEach((input) => grandParentHigh.set(input, -1))\\n  )\\n\\n  let pressed = 0\\n\\n  while (modules.get('rx')!.high) {\\n    pressed++\\n    buttonPulses(modules, pressed, grandParentHigh)\\n    if (grandParentHigh.values().every((v) => v != -1)) {\\n      console.log(grandParentHigh.values())\\n      return grandParentHigh.values().reduce((total, value) => value * total, 1)\\n    }\\n  }\\n  return pressed\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    var modules = Parse(Input);\\n    var rxParents = modules.Values.Where(x => x.Connections.Contains(\\\"rx\\\"));\\n    var rxGrandParents = rxParents.SelectMany(x => x.Inputs.Keys);\\n    Dictionary<string, long> grandParentHigh = [];\\n\\n    foreach (var gp in rxGrandParents)\\n        grandParentHigh[gp] = -1;\\n\\n    int pressed = 0;\\n    while (modules[\\\"rx\\\"].Value)\\n    {\\n        pressed++;\\n        ButtonPulses(modules, pressed, grandParentHigh);\\n        if (grandParentHigh.Values.All(x => x != -1))\\n            return grandParentHigh.Values.Aggregate((x, y) => x * y);\\n    }\\n    return pressed;\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2023/20.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","em","ol","li","a","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","names","className","href","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}