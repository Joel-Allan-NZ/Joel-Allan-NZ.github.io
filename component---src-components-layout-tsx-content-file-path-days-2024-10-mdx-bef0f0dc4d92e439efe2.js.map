{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2024-10-mdx-bef0f0dc4d92e439efe2.js","mappings":"uOAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBR,EAAMS,aAAa,QAACC,GAAWT,EAExD,OADKS,GAsBP,SAA8BC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAxBgBG,CAAqB,WAAW,GACvCC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,2QAA4Q,KAAMU,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,qHAAsH,KAAMU,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,iQAAkQU,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,iCAAkC,4GAA6G,KAAMS,EAAAA,cAAoBL,EAAS,CACvpCM,QAAS,MACTC,MAAO,iBACNF,EAAAA,cAAoBd,EAAYM,IAAK,KAAMQ,EAAAA,cAAoBd,EAAYK,KAAM,CAClFY,UAAW,eACV,opDAAqpDH,EAAAA,cAAoBd,EAAYM,IAAK,KAAMQ,EAAAA,cAAoBd,EAAYK,KAAM,CACvuDY,UAAW,mBACV,woCAAyoC,KAAMH,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,0LAA2L,KAAMU,EAAAA,cAAoBL,EAAS,CACp9CM,QAAS,MACTC,MAAO,iBACNF,EAAAA,cAAoBd,EAAYM,IAAK,KAAMQ,EAAAA,cAAoBd,EAAYK,KAAM,CAClFY,UAAW,eACV,6kBAA8kBH,EAAAA,cAAoBd,EAAYM,IAAK,KAAMQ,EAAAA,cAAoBd,EAAYK,KAAM,CAChqBY,UAAW,mBACV,wpBACL,CAKA,MAJA,SAAoBlB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOW,EAAYL,EAAAA,cAAoBK,EAAWpB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oDCtBA,MAAMqB,EAAa,CACjBX,QAAOA,EAAAA,GAET,SAASY,EAAOC,GACd,IAAI,YAACC,EAAW,SAAEC,GAAYF,EAC9B,OAAOR,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBW,EAAAA,EAAQ,MAAOX,EAAAA,cAAoB,MAAO,CAC7GG,UAAW,+BACVH,EAAAA,cAAoBY,EAAAA,EAAe,CACpC3B,MAAOwB,EAAYI,OACjBb,EAAAA,cAAoB,MAAO,CAC7BG,UAAW,qCACVH,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,IAAK,CAC1Dc,KAAM,4BAA8BL,EAAYM,KAAO,QAAUN,EAAYO,MAC5EP,EAAYM,KAAO,QAAUN,EAAYO,KAAO,MAAQP,EAAYQ,QAASjB,EAAAA,cAAoBkB,EAAAA,GAAa,CAC/GxB,WAAYY,GACXI,GAAWD,EAAYO,MAAQP,EAAYM,KAAOf,EAAAA,cAAoBmB,EAAAA,EAAa,CACpFJ,KAAMN,EAAYM,KAClBC,KAAMP,EAAYO,OACfhB,EAAAA,cAAoBA,EAAAA,SAAgB,QAASA,EAAAA,cAAoBoB,EAAAA,EAAQ,MAChF,CACe,SAASC,EAAiBpC,GACvC,OAAOe,EAAAA,cAAoBO,EAAQtB,EAAOe,EAAAA,cAAoBsB,EAAqBrC,GACrF,CACO,MAAMsC,EAAOA,IAAMvB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,QAAS,KAAM,kCAAmCA,EAAAA,cAAoB,OAAQ,CACpKwB,KAAM,OACJxB,EAAAA,cAAoB,OAAQ,CAC9ByB,IAAK,aACLX,KAAM,iCACJd,EAAAA,cAAoB,OAAQ,CAC9ByB,IAAK,aACLX,KAAM,8BACJd,EAAAA,cAAoB,OAAQ,CAC9Bc,KAAM,mKACNW,IAAK,e","sources":["webpack://joel-allan-nz.github.io/./days/2024/10.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"I chose to be lazy, and do 90% of the work while parsing the input. If we treat the data as a set of nodes that only have edges to a direct neighbour in the same row or column that has a value exactly one greater, then we effectively have a graph of valid trails.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"From there it's as simple as a quick breadth first search to find the number of 9s reachable from each trailhead.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"I opted for a non-recursive approach in the C# solution, purely because recursion is never as reliable as an interative method (stack overflow!), and the C# syntax is brief enough to be easily read. The C# solution also makes use of a basic helper class \", React.createElement(_components.code, null, \"GridGraph<Tvalue, TedgeValue>\"), \" that I wrote to lazily work with graphs that use grid coordinates - a frequent theme in Advent of Code!\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"one\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const trails = parse(input)\\n  const trailHeads = trails.flatMap((row) =>\\n    row.filter((col) => col.value == 0)\\n  )\\n\\n  return trailHeads.reduce(\\n    (total, head) =>\\n      total + findNines(trails, head, new Map<number, Set<number>>()),\\n    0\\n  )\\n}\\n\\nfunction findNines(\\n  trails: Node[][],\\n  current: Node,\\n  nines: Map<number, Set<number>>\\n) {\\n  current.edges.forEach((edge) => {\\n    const node = trails[edge[0]][edge[1]]\\n    if (node.value == 9) {\\n      if (!nines.has(node.y)) nines.set(node.y, new Set<number>([node.x]))\\n      else nines.get(node.y)?.add(node.x)\\n    } else findNines(trails, node, nines)\\n  })\\n\\n  return nines.keys().reduce((t, y) => nines.get(y)!.size + t, 0)\\n}\\n\\ninterface Node {\\n  value: number\\n  edges: number[][]\\n  x: number\\n  y: number\\n}\\n\\nfunction parse(input: string[]): Node[][] {\\n  const trailMap: Node[][] = []\\n  input.forEach((line, y) => {\\n    trailMap.push([])\\n    line.split('').forEach((val, x) => {\\n      trailMap[y].push({ value: parseInt(val), edges: [], x, y })\\n\\n      if (y != 0) {\\n        if (trailMap[y - 1][x].value == trailMap[y][x].value + 1)\\n          trailMap[y][x].edges.push([y - 1, x])\\n        else if (trailMap[y - 1][x].value == trailMap[y][x].value - 1)\\n          trailMap[y - 1][x].edges.push([y, x])\\n      }\\n\\n      if (x != 0) {\\n        if (trailMap[y][x - 1].value == trailMap[y][x].value + 1)\\n          trailMap[y][x].edges.push([y, x - 1])\\n        else if (trailMap[y][x - 1].value == trailMap[y][x].value - 1)\\n          trailMap[y][x - 1].edges.push([y, x])\\n      }\\n    })\\n  })\\n  return trailMap\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    GridGraph<int, int> graph = Parse();\\n    var trailHeads = graph.Nodes.Where(x => x.Value == 0);\\n    int score = 0;\\n\\n    foreach (var trailHead in trailHeads)\\n    {\\n        HashSet<Node<int, int>> nines = [];\\n        Queue<Node<int, int>> toVisit = [];\\n        toVisit.Enqueue(trailHead);\\n\\n        while (toVisit.Count > 0)\\n        {\\n            var current = toVisit.Dequeue();\\n            foreach (var neighbour in current.Edges.Keys)\\n            {\\n                if (neighbour.Value == 9)\\n                    nines.Add(neighbour);\\n                else\\n                    toVisit.Enqueue(neighbour);\\n            }\\n        }\\n        score += nines.Count;\\n    }\\n    return score;\\n}\\n\\nprivate GridGraph<int, int> Parse()\\n{\\n    GridGraph<int, int> graph = new();\\n\\n    for (int i = 0; i < Input.Length; i++)\\n    {\\n        for (int j = 0; j < Input[i].Length; j++)\\n        {\\n            if (Input[i][j] != '.')\\n                graph.AddNodeWithGridNeighbours(j, i, int.Parse(Input[i][j].ToString()), true, (x, y) => x.Value == y.Value - 1);\\n        }\\n    }\\n    return graph;\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"A theme of these early puzzles seems to be simple/simpler part twos. I used almost an identical BFS algorithm, except it no longer had to ensure that found 9s are unique. Easy peasy.\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"two\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const trails = parse(input)\\n  const trailHeads = trails.flatMap((row) =>\\n    row.filter((col) => col.value == 0)\\n  )\\n\\n  return trailHeads.reduce((total, head) => {\\n    let score = 0\\n    const toVisit: Node[] = [head]\\n\\n    while (toVisit.length > 0) {\\n      const current = toVisit.shift()\\n\\n      current!.edges.forEach((edge) => {\\n        const node = trails[edge[0]][edge[1]]\\n        if (node.value == 9) score++\\n        else toVisit.push(node)\\n      })\\n    }\\n\\n    return score + total\\n  }, 0)\\n}\\n\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    GridGraph<int, int> graph = Parse();\\n    var trailHeads = graph.Nodes.Where(x => x.Value == 0);\\n    int score = 0;\\n    foreach (var trailHead in trailHeads)\\n    {\\n        Queue<Node<int, int>> toVisit = [];\\n        toVisit.Enqueue(trailHead);\\n\\n        while (toVisit.Count > 0)\\n        {\\n            var current = toVisit.Dequeue();\\n            foreach (var neighbour in current.Edges.Keys)\\n            {\\n                if (neighbour.Value == 9)\\n                    score++;\\n                else\\n                    toVisit.Enqueue(neighbour);\\n            }\\n        }\\n    }\\n    return score;\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2024/10.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","boxname","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}