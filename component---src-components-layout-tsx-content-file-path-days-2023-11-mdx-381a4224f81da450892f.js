"use strict";(self.webpackChunkjoel_allan_nz_github_io=self.webpackChunkjoel_allan_nz_github_io||[]).push([[8779],{8692:function(e,n,t){t.r(n),t.d(n,{Head:function(){return d},default:function(){return p}});var a=t(8453),i=t(6540);function r(e){const n=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code"},(0,a.RP)(),e.components),{CodeBox:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeBox",!0),i.createElement(i.Fragment,null,i.createElement(n.h2,null,"Part One"),"\n",i.createElement(n.p,null,"Another speedy one. The input size isn't terribly big, so today was all about just speed-of-writing-code rather than code performance."),"\n",i.createElement(t,{names:"typescript|C#"},i.createElement(n.pre,null,i.createElement(n.code,{className:"language-js"},"export function partOne(input: string[]): number | string {\n  let distance = 0\n  const galaxies = expandGalaxies(parse(input), input, 1)\n\n  galaxies.forEach((i, index) => {\n    distance += galaxies\n      .slice(index + 1)\n      .reduce(\n        (total, current) =>\n          total + Math.abs(current[0] - i[0]) + Math.abs(current[1] - i[1]),\n        0\n      )\n  })\n\n  return distance\n}\n\nfunction parse(input: string[]): Map<number, number[]> {\n  const galaxies = new Map<number, number[]>()\n\n  input.forEach((line, y) => {\n    line.split('').forEach((c, x) => {\n      if (c == '#') {\n        if (galaxies.has(y)) galaxies.get(y)!.push(x)\n        else galaxies.set(y, [x])\n      }\n    })\n  })\n  return galaxies\n}\n\nfunction expandGalaxies(\n  galaxies: Map<number, number[]>,\n  input: string[],\n  expandSize: number\n): number[][] {\n  var missingY: number[] = []\n  var missingX: number[] = []\n\n  for (let y = 0; y < input.length; y++) if (!galaxies.has(y)) missingY.push(y)\n\n  for (let x = 0; x < input[0].length; x++)\n    if (!galaxies.values().some((z) => z.includes(x))) missingX.push(x)\n\n  missingY.sort((x, y) => x - y)\n  missingX.sort((x, y) => x - y)\n\n  const effectiveCoords: number[][] = []\n\n  galaxies.keys().forEach((y) => {\n    let yIndex = missingY.findIndex((missing) => missing > y)\n    yIndex = yIndex == -1 ? missingY.length : yIndex\n    const realY = y + expandSize * yIndex\n\n    galaxies.get(y)!.forEach((x) => {\n      let xIndex = missingX.findIndex((missing) => missing > x)\n      xIndex = xIndex == -1 ? missingX.length : xIndex\n      effectiveCoords.push([realY, x + expandSize * xIndex])\n    })\n  })\n  return effectiveCoords\n}\n")),i.createElement(n.pre,null,i.createElement(n.code,{className:"language-csharp"},"public override object PartOne()\n{\n    long totalDistance = 0;\n    var galaxies = ExpandGalaxies(Parse(), 1);\n\n    for (int i = 0; i < galaxies.Count; i++)\n        totalDistance += galaxies.Skip(i + 1)\n                                         .Sum(x => Math.Abs(galaxies[i][0] - x[0]) + Math.Abs(galaxies[i][1] - x[1]));\n\n    return totalDistance;\n}\n\nprivate Dictionary<int, List<int>> Parse()\n{\n    Dictionary<int, List<int>> galaxies = [];\n    for (int y = 0; y < Input.Length; y++)\n    {\n        for (int x = 0; x < Input.Length; x++)\n        {\n            if (Input[y][x] == '#')\n            {\n                if (galaxies.TryGetValue(y, out var list))\n                    list.Add(x);\n                else\n                    galaxies.Add(y, [x]);\n            }\n        }\n    }\n    return galaxies;\n}\n\nprivate List<long[]> ExpandGalaxies(Dictionary<int, List<int>> galaxies, int expandSize)\n{\n    var missingY = Enumerable.Range(0, Input.Length).Where(y => !galaxies.ContainsKey(y));\n    var missingX = Enumerable.Range(0, Input[0].Length).Where(x => !galaxies.Values.Any(z => z.Contains(x)));\n\n    List<long[]> effectiveCoords = [];\n    foreach (var galaxy in galaxies)\n    {\n        var effectiveY = galaxy.Key + expandSize * missingY.Count(x => x < galaxy.Key);\n        foreach (var x in galaxy.Value)\n            effectiveCoords.Add([effectiveY, x + expandSize * missingX.Count(z => z < x)]);\n    }\n    return effectiveCoords;\n}\n"))),"\n",i.createElement(n.h2,null,"Part Two"),"\n",i.createElement(n.p,null,"A bigger expansion size doesn't really matter for this one (unless for some reason you were actually adding rows/columns to the input), the one gotcha is that 1,000,000 times bigger is an increase of 999,999, not one million."),"\n",i.createElement(t,{names:"typescript|C#"},i.createElement(n.pre,null,i.createElement(n.code,{className:"language-ts"},"export function partTwo(input: string[]): number | string {\n  let distance = 0\n  const galaxies = expandGalaxies(parse(input), input, 999999)\n\n  galaxies.forEach((i, index) => {\n    distance += galaxies\n      .slice(index + 1)\n      .reduce(\n        (total, current) =>\n          total + Math.abs(current[0] - i[0]) + Math.abs(current[1] - i[1]),\n        0\n      )\n  })\n\n  return distance\n}\n")),i.createElement(n.pre,null,i.createElement(n.code,{className:"language-csharp"},"public override object PartTwo()\n{\n    long totalDistance = 0;\n    var galaxies = ExpandGalaxies(Parse(), 999999);\n\n    for (int i = 0; i < galaxies.Count; i++)\n        totalDistance += galaxies.Skip(i + 1)\n                                 .Sum(x => Math.Abs(galaxies[i][0] - x[0]) + Math.Abs(galaxies[i][1] - x[1]));\n\n    return totalDistance;\n}\n"))))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.RP)(),e.components);return n?i.createElement(n,e,i.createElement(r,e)):r(e)};var l=t(2779),o=t(7206),c=t(791),u=t(4813),x=t(572);const g={CodeBox:l.A};function m(e){let{pageContext:n,children:t}=e;return i.createElement(i.Fragment,null,i.createElement(u.A,null),i.createElement("div",{className:"min-h-screen bg-chicPrimary"},i.createElement(c.A,{props:n.list}),i.createElement("div",{className:"adventofcode max-w-[60%] ml-[20%]"},i.createElement("h1",null,i.createElement("a",{href:"https://adventofcode.com/"+n.year+"/day/"+n.puzz},n.year+" Day "+n.puzz+" - "+n.title)),i.createElement(a.xA,{components:g},t),n.puzz&&n.year?i.createElement(o.A,{year:n.year,puzz:n.puzz}):i.createElement(i.Fragment,null))),i.createElement(x.A,null))}function p(e){return i.createElement(m,e,i.createElement(s,e))}const d=()=>i.createElement(i.Fragment,null,i.createElement("title",null,"Joel-Allan-NZ - Advent of Code"),i.createElement("html",{lang:"en"}),i.createElement("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),i.createElement("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),i.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap",rel:"stylesheet"}))}}]);
//# sourceMappingURL=component---src-components-layout-tsx-content-file-path-days-2023-11-mdx-381a4224f81da450892f.js.map