{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2023-11-mdx-381a4224f81da450892f.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2023/11.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Another speedy one. The input size isn't terribly big, so today was all about just speed-of-writing-code rather than code performance.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  let distance = 0\\n  const galaxies = expandGalaxies(parse(input), input, 1)\\n\\n  galaxies.forEach((i, index) => {\\n    distance += galaxies\\n      .slice(index + 1)\\n      .reduce(\\n        (total, current) =>\\n          total + Math.abs(current[0] - i[0]) + Math.abs(current[1] - i[1]),\\n        0\\n      )\\n  })\\n\\n  return distance\\n}\\n\\nfunction parse(input: string[]): Map<number, number[]> {\\n  const galaxies = new Map<number, number[]>()\\n\\n  input.forEach((line, y) => {\\n    line.split('').forEach((c, x) => {\\n      if (c == '#') {\\n        if (galaxies.has(y)) galaxies.get(y)!.push(x)\\n        else galaxies.set(y, [x])\\n      }\\n    })\\n  })\\n  return galaxies\\n}\\n\\nfunction expandGalaxies(\\n  galaxies: Map<number, number[]>,\\n  input: string[],\\n  expandSize: number\\n): number[][] {\\n  var missingY: number[] = []\\n  var missingX: number[] = []\\n\\n  for (let y = 0; y < input.length; y++) if (!galaxies.has(y)) missingY.push(y)\\n\\n  for (let x = 0; x < input[0].length; x++)\\n    if (!galaxies.values().some((z) => z.includes(x))) missingX.push(x)\\n\\n  missingY.sort((x, y) => x - y)\\n  missingX.sort((x, y) => x - y)\\n\\n  const effectiveCoords: number[][] = []\\n\\n  galaxies.keys().forEach((y) => {\\n    let yIndex = missingY.findIndex((missing) => missing > y)\\n    yIndex = yIndex == -1 ? missingY.length : yIndex\\n    const realY = y + expandSize * yIndex\\n\\n    galaxies.get(y)!.forEach((x) => {\\n      let xIndex = missingX.findIndex((missing) => missing > x)\\n      xIndex = xIndex == -1 ? missingX.length : xIndex\\n      effectiveCoords.push([realY, x + expandSize * xIndex])\\n    })\\n  })\\n  return effectiveCoords\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    long totalDistance = 0;\\n    var galaxies = ExpandGalaxies(Parse(), 1);\\n\\n    for (int i = 0; i < galaxies.Count; i++)\\n        totalDistance += galaxies.Skip(i + 1)\\n                                         .Sum(x => Math.Abs(galaxies[i][0] - x[0]) + Math.Abs(galaxies[i][1] - x[1]));\\n\\n    return totalDistance;\\n}\\n\\nprivate Dictionary<int, List<int>> Parse()\\n{\\n    Dictionary<int, List<int>> galaxies = [];\\n    for (int y = 0; y < Input.Length; y++)\\n    {\\n        for (int x = 0; x < Input.Length; x++)\\n        {\\n            if (Input[y][x] == '#')\\n            {\\n                if (galaxies.TryGetValue(y, out var list))\\n                    list.Add(x);\\n                else\\n                    galaxies.Add(y, [x]);\\n            }\\n        }\\n    }\\n    return galaxies;\\n}\\n\\nprivate List<long[]> ExpandGalaxies(Dictionary<int, List<int>> galaxies, int expandSize)\\n{\\n    var missingY = Enumerable.Range(0, Input.Length).Where(y => !galaxies.ContainsKey(y));\\n    var missingX = Enumerable.Range(0, Input[0].Length).Where(x => !galaxies.Values.Any(z => z.Contains(x)));\\n\\n    List<long[]> effectiveCoords = [];\\n    foreach (var galaxy in galaxies)\\n    {\\n        var effectiveY = galaxy.Key + expandSize * missingY.Count(x => x < galaxy.Key);\\n        foreach (var x in galaxy.Value)\\n            effectiveCoords.Add([effectiveY, x + expandSize * missingX.Count(z => z < x)]);\\n    }\\n    return effectiveCoords;\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"A bigger expansion size doesn't really matter for this one (unless for some reason you were actually adding rows/columns to the input), the one gotcha is that 1,000,000 times bigger is an increase of 999,999, not one million.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  let distance = 0\\n  const galaxies = expandGalaxies(parse(input), input, 999999)\\n\\n  galaxies.forEach((i, index) => {\\n    distance += galaxies\\n      .slice(index + 1)\\n      .reduce(\\n        (total, current) =>\\n          total + Math.abs(current[0] - i[0]) + Math.abs(current[1] - i[1]),\\n        0\\n      )\\n  })\\n\\n  return distance\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    long totalDistance = 0;\\n    var galaxies = ExpandGalaxies(Parse(), 999999);\\n\\n    for (int i = 0; i < galaxies.Count; i++)\\n        totalDistance += galaxies.Skip(i + 1)\\n                                 .Sum(x => Math.Abs(galaxies[i][0] - x[0]) + Math.Abs(galaxies[i][1] - x[1]));\\n\\n    return totalDistance;\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2023/11.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}