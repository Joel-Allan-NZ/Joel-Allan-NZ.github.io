"use strict";(self.webpackChunkjoel_allan_nz_github_io=self.webpackChunkjoel_allan_nz_github_io||[]).push([[22],{8142:function(e,n,t){t.r(n),t.d(n,{Head:function(){return h},default:function(){return d}});var r=t(8453),l=t(6540);function a(e){const n=Object.assign({h2:"h2",p:"p",em:"em",pre:"pre",code:"code"},(0,r.RP)(),e.components),{CodeBox:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeBox",!0),l.createElement(l.Fragment,null,l.createElement(n.h2,null,"Part One"),"\n",l.createElement(n.p,null,"A very long description to the problem, but it tells you ",l.createElement(n.em,null,"exactly")," how to solve it. Purely a speed exercise."),"\n",l.createElement(t,{names:"typescript|C#"},l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"export function partOne(input: string[]): number | string {\n  return input.reduce((total, line) => {\n    const split = line.split(' ').map((x) => parseInt(x))\n    const differences = zeroOutHistory(split)\n    return (\n      total +\n      differences.reduce((last, current) => last + current.slice(-1)[0], 0)\n    )\n  }, 0)\n}\n\nfunction zeroOutHistory(history: number[]): number[][] {\n  const differences: number[][] = [history]\n\n  while (differences.slice(-1)[0].some((x) => x != 0)) {\n    const last = differences.slice(-1)[0]\n    const next: number[] = []\n    last.slice(1).forEach((item, index) => next.push(item - last[index]))\n    differences.push(next)\n  }\n  console.log(differences)\n  return differences.reverse()\n}\n")),l.createElement(n.pre,null,l.createElement(n.code,{className:"language-csharp"},"public override object PartOne()\n{\n    return Input.Sum(line =>\n    {\n        var split = line.Split(' ').Select(x => int.Parse(x)).ToList();\n        var differences = ZeroOutHistory(split);\n        return differences.Aggregate(0, (x, y) => x + y[^1]);\n    });\n}\n\nprivate static List<List<int>> ZeroOutHistory(List<int> history)\n{\n    List<List<int>> differences = [history];\n\n    while (differences[^1].Any(x => x != 0))\n    {\n        var last = differences.Last();\n        List<int> next = [];\n        for (int i = 1; i < last.Count; i++)\n            next.Add(last[i] - last[i - 1]);\n\n        differences.Add(next);\n    }\n    differences.Reverse();\n    return differences;\n}\n"))),"\n",l.createElement(n.h2,null,"Part Two"),"\n",l.createElement(n.p,null,"The same thing, but backwards. The only alteration is to change how each new value is calculated by switching some addition to subtraction. All about being quick in order to make the leaderboard."),"\n",l.createElement(t,{names:"typescript|C#"},l.createElement(n.pre,null,l.createElement(n.code,{className:"language-ts"},"export function partTwo(input: string[]): number | string {\n  return input.reduce((total, line) => {\n    const split = line.split(' ').map((x) => parseInt(x))\n    const differences = zeroOutHistory(split)\n    return total + differences.reduce((last, current) => current[0] - last, 0)\n  }, 0)\n}\n")),l.createElement(n.pre,null,l.createElement(n.code,{className:"language-csharp"},"public override object PartTwo()\n{\n    return Input.Sum(line =>\n    {\n        var split = line.Split(' ').Select(x => int.Parse(x)).ToList();\n        var differences = ZeroOutHistory(split);\n        return differences.Aggregate(0, (x, y) => y[0] - x);\n    });\n}\n"))))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.RP)(),e.components);return n?l.createElement(n,e,l.createElement(a,e)):a(e)};var s=t(2779),c=t(7206),o=t(791),u=t(4813),m=t(572);const p={CodeBox:s.A};function f(e){let{pageContext:n,children:t}=e;return l.createElement(l.Fragment,null,l.createElement(u.A,null),l.createElement("div",{className:"min-h-screen bg-chicPrimary"},l.createElement(o.A,{props:n.list}),l.createElement("div",{className:"adventofcode max-w-[60%] ml-[20%]"},l.createElement("h1",null,l.createElement("a",{href:"https://adventofcode.com/"+n.year+"/day/"+n.puzz},n.year+" Day "+n.puzz+" - "+n.title)),l.createElement(r.xA,{components:p},t),n.puzz&&n.year?l.createElement(c.A,{year:n.year,puzz:n.puzz}):l.createElement(l.Fragment,null))),l.createElement(m.A,null))}function d(e){return l.createElement(f,e,l.createElement(i,e))}const h=()=>l.createElement(l.Fragment,null,l.createElement("title",null,"Joel-Allan-NZ - Advent of Code"),l.createElement("html",{lang:"en"}),l.createElement("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),l.createElement("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),l.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap",rel:"stylesheet"}))}}]);
//# sourceMappingURL=component---src-components-layout-tsx-content-file-path-days-2023-9-mdx-f721b562b9732fb54104.js.map