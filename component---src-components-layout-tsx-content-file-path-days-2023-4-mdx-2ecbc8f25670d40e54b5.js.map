{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2023-4-mdx-2ecbc8f25670d40e54b5.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2023/4.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Purely a matter of parsing the input and checking whether the winning number count is adequate. Not a lot to this, definitely set up for part 2.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const cards = parse(input)\\n\\n  return cards\\n    .values()\\n    .reduce((total, card) => (card == 0 ? total : total + 2 ** (card - 1)), 0)\\n}\\n\\nfunction parse(input: string[]): Map<number, number> {\\n  const cards = new Map<number, number>()\\n\\n  input.forEach((line) => {\\n    const split = line.split('|')\\n    const num = split[0].split(':')\\n    const numbers = new Set<string>([\\n      ...num[1].matchAll(/\\\\d+/g).map((x) => x[0]),\\n    ])\\n    const winning = split[1].matchAll(/\\\\d+/g)\\n    const game = parseInt(num[0].match(/\\\\d+/)![0])\\n\\n    const winningCount = winning.reduce(\\n      (total, current) => (numbers.has(current[0]) ? total + 1 : total),\\n      0\\n    )\\n    cards.set(game, winningCount)\\n  })\\n  return cards\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    Dictionary<int, int> cards = Parse(Input);\\n    return cards.Sum(x => x.Value == 0 ? 0 : (int)Math.Pow(2, x.Value - 1));\\n}\\n\\nprivate static Dictionary<int, int> Parse(string[] input)\\n{\\n    Dictionary<int, int> cards = [];\\n    foreach (var line in input)\\n    {\\n        var split = line.Split('|');\\n        var num = split[0].Split(':');\\n        var numbers = Regex.Matches(num[1], @\\\"\\\\d+\\\").Select(x => x.Value).ToHashSet();\\n        var winning = Regex.Matches(split[1], @\\\"\\\\d+\\\");\\n        var game = Regex.Match(num[0], @\\\"\\\\d+\\\").Value;\\n        cards[int.Parse(game)] = winning.Count(x => numbers.Contains(x.Value));\\n    }\\n    return cards;\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"Nothing groundbreaking here, just \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Recursion_(computer_science)\"\n  }, \"recursively\"), \" finding the number of cards awarded by a win by also checking how cards the children award (and grandchildren and...). Values are \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Memoization\"\n  }, \"memoized\"), \" to avoid recalculating values.\\nTake those values, add 'em up, and you have your total.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const cards = parse(input)\\n  const cache = new Map<number, number>()\\n  return cards\\n    .keys()\\n    .reduce((total, card) => countCardWinnings(cards, cache, card) + total, 0)\\n}\\n\\nfunction countCardWinnings(\\n  cards: Map<number, number>,\\n  cache: Map<number, number>,\\n  card: number\\n): number {\\n  if (cache.has(card)) return cache.get(card)!\\n\\n  const winSize = cards.get(card)! + card\\n  let total = 1\\n  for (let i = card + 1; i <= winSize; i++)\\n    total += countCardWinnings(cards, cache, i)\\n\\n  cache.set(card, total)\\n  return total\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    Dictionary<int, int> cards = Parse(Input);\\n    Dictionary<int, int> cache = [];\\n    return cards.Sum(card => CountCardWinnings(cards, cache, card.Key));\\n}\\n\\nprivate static int CountCardWinnings(Dictionary<int, int> cards, Dictionary<int, int> cache, int card)\\n{\\n    if (cache.TryGetValue(card, out int value))\\n    {\\n        return value;\\n    }\\n    else\\n    {\\n        int winSize = cards[card];\\n        int sum = 1;\\n        for (int i = card + 1; i <= card + winSize; i++)\\n        {\\n            sum += CountCardWinnings(cards, cache, i);\\n        }\\n        cache[card] = sum;\\n        return sum;\\n    }\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2023/4.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","names","className","href","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}