"use strict";(self.webpackChunkjoel_allan_nz_github_io=self.webpackChunkjoel_allan_nz_github_io||[]).push([[3483],{8893:function(e,n,t){t.r(n),t.d(n,{Head:function(){return h},default:function(){return g}});var a=t(8453),r=t(6540);function l(e){const n=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code",em:"em"},(0,a.RP)(),e.components),{CodeBox:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeBox",!0),r.createElement(r.Fragment,null,r.createElement(n.h2,null,"Part One"),"\n",r.createElement(n.p,null,"Time for some simple recursion. Nothing much to talk about here, we simply check the possible options for resolving the equation with a DFS, pruning invalid paths as we go."),"\n",r.createElement(t,{names:"typescript|C#"},r.createElement(n.pre,null,r.createElement(n.code,{className:"language-js"},"export function partOne(input: string[]): number | string {\n  const parsed = parse(input)\n\n  return parsed.reduce(\n    (total, current) =>\n      canBeValid(current[0], current[1], current.slice(2), 0)\n        ? total + current[0]\n        : total,\n    0\n  )\n}\n\nfunction parse(input: string[]): number[][] {\n  return input.map((line) => line.split(/\\ \\:|\\ /).map((val) => parseInt(val)))\n}\n\nfunction canBeValid(\n  target: number,\n  total: number,\n  values: number[],\n  index: number\n): boolean {\n  if (index == values.length) return total == target\n  if (total > target) return false\n\n  return (\n    canBeValid(target, total * values[index], values, index + 1) ||\n    canBeValid(target, total + values[index], values, index + 1)\n  )\n}\n")),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-csharp"},"public override object PartOne()\n{\n    var parsed = Parse();\n\n    return parsed.Sum(line => CanBeValid(line[0], line[1], line[2..], 0) ? line.First() : 0);\n}\n\nprivate IEnumerable<List<long>> Parse() => Input.Select(x => x.Split([' ', ':'], StringSplitOptions.RemoveEmptyEntries)\n                        .Select(x => long.Parse(x))\n                        .ToList());\n\nprivate static bool CanBeValid(long target, long total, List<long> values, int index)\n{\n    if (index == values.Count)\n        return total == target;\n\n    if (total > target)\n        return false;\n\n    return CanBeValid(target, total * values[index], values, index + 1) ||\n        CanBeValid(target, total + values[index], values, index + 1);\n}\n"))),"\n",r.createElement(n.h2,null,"Part Two"),"\n",r.createElement(n.p,null,"The exact same problem, but with a third operator added to the mix. I opted to explicitly code the operators in a new function rather than altering the original - passing in a collection of operators and iterating over that collection requires a ",r.createElement(n.em,null,"lot")," of iterators to be generated with the expected performance hits that entails."),"\n",r.createElement("br"),"\n",r.createElement(n.p,null,"My two function approach makes for slightly less reusable code, but almost halves\nthe C# solution time on my machine. As the code will never actually be used again,\nI opted for performance over reusability."),"\n",r.createElement(t,{names:"typescript|C#"},r.createElement(n.pre,null,r.createElement(n.code,{className:"language-js"},"export function partTwo(input: string[]): number | string {\n  const parsed = parse(input)\n\n  return parsed.reduce(\n    (total, current) =>\n      canBeValidWithConcat(current[0], current[1], current.slice(2), 0)\n        ? total + current[0]\n        : total,\n    0\n  )\n}\n\nfunction canBeValidWithConcat(\n  target: number,\n  total: number,\n  values: number[],\n  index: number\n): boolean {\n  if (index == values.length) return total == target\n  if (total > target) return false\n\n  return (\n    canBeValidWithConcat(target, total * values[index], values, index + 1) ||\n    canBeValidWithConcat(target, total + values[index], values, index + 1) ||\n    canBeValidWithConcat(\n      target,\n      parseInt(total.toString() + values[index]),\n      values,\n      index + 1\n    )\n  )\n}\n")),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-csharp"},"public override object PartTwo()\n{\n    var parsed = Parse();\n\n    return parsed.Sum(line => CanBeValidWithConcat(line[0], line[1], line[2..], 0) ? line.First() : 0);\n}\n\n\nprivate static bool CanBeValidWithConcat(long target, long total, List<long> values, int index)\n{\n    if (index == values.Count)\n        return total == target;\n\n    if (total > target)\n        return false;\n\n    return CanBeValidWithConcat(target, total * values[index], values, index + 1) ||\n        CanBeValidWithConcat(target, total + values[index], values, index + 1) ||\n        CanBeValidWithConcat(target, long.Parse(total.ToString() + values[index].ToString()), values, index + 1);\n}\n\n"))))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.RP)(),e.components);return n?r.createElement(n,e,r.createElement(l,e)):l(e)};var o=t(2779),c=t(7206),s=t(791),u=t(4813),m=t(572);const p={CodeBox:o.A};function d(e){let{pageContext:n,children:t}=e;return r.createElement(r.Fragment,null,r.createElement(u.A,null),r.createElement("div",{className:"min-h-screen bg-chicPrimary"},r.createElement(s.A,{props:n.list}),r.createElement("div",{className:"adventofcode max-w-[60%] ml-[20%]"},r.createElement("h1",null,r.createElement("a",{href:"https://adventofcode.com/"+n.year+"/day/"+n.puzz},n.year+" Day "+n.puzz+" - "+n.title)),r.createElement(a.xA,{components:p},t),n.puzz&&n.year?r.createElement(c.A,{year:n.year,puzz:n.puzz}):r.createElement(r.Fragment,null))),r.createElement(m.A,null))}function g(e){return r.createElement(d,e,r.createElement(i,e))}const h=()=>r.createElement(r.Fragment,null,r.createElement("title",null,"Joel-Allan-NZ - Advent of Code"),r.createElement("html",{lang:"en"}),r.createElement("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),r.createElement("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),r.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap",rel:"stylesheet"}))}}]);
//# sourceMappingURL=component---src-components-layout-tsx-content-file-path-days-2024-7-mdx-d7306bd190283e4c3221.js.map