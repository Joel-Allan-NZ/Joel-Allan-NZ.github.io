{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2024-21-mdx-834174c45c5f0501a089.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2024/21.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Sometimes solutions are nice and clean, concise and elegant, fast and efficient.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"This solution is fast, and that's about it. It's complex, not particularly easy to\\nfollow, and uses recursion to handle solving subproblems. My policy with these solutions\\nis to remove any explanatory comments (and rely on this space to explain anything\\nthat might need it), but we're pushing it to the limit with this one. Here goes!\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"First, I determine the coordinates of the buttons on each keypad, and use those coords\\nalong with an input code to determine the potential movements that the first direction\\npad robot must press for the numpad robot to press the values in that input code.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"With those potential series of moves in mind, I break them into pairs of keypresses,\\nand find the various sets of moves that a robot one step higher up the chain might\\npress in order to have that outcome. This is the base of my solution; a repeatable\\nsubproblem. At this point hopefully it becomes obvious that this is a \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Dynamic_programming\"\n  }, \"\\ndynamic programming\\n\"), \" problem. We have repeatable subproblems, so of course I cache the solution of\\neach subproblem for faster processing as we move along. It becomes a matter of continuing\\nto find sets of moves that a parent robot might press, and the 'cheapest' option\\nwithin each set. Continue with this until we complete the parent problem of x robots.\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"one\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  return findComplexity(2, input)\\n}\\n\\ninterface Key {\\n  x: number\\n  y: number\\n  c: string\\n}\\n\\nclass RobotCache {\\n  cache: Map<string, Map<string, Map<number, number>>>\\n  constructor() {\\n    this.cache = new Map<string, Map<string, Map<number, number>>>()\\n  }\\n\\n  setCache(a: string, b: string, robots: number, count: number) {\\n    if (!this.cache.has(a))\\n      this.cache.set(a, new Map<string, Map<number, number>>())\\n    if (!this.cache.get(a)?.has(b))\\n      this.cache.get(a)?.set(b, new Map<number, number>())\\n\\n    this.cache.get(a)?.get(b)?.set(robots, count)\\n  }\\n\\n  tryGetCache(a: string, b: string, robots: number) {\\n    return this.cache.get(a)?.get(b)?.get(robots)\\n  }\\n}\\n\\nfunction findComplexity(robotCount: number, input: string[]): number {\\n  const { numPad, directionalPad } = generateKeyDictionaries()\\n  const cache = new RobotCache()\\n  let score = 0\\n\\n  for (let line of input) {\\n    const moves = numPadMoves(line, 'A', numPad)\\n\\n    const minCost = moves.reduce((minimum, current) => {\\n      const pairs = current\\n        .split('')\\n        .map((item, index) => [index == 0 ? 'A' : current[index - 1], item])\\n      const pairsCost = pairs.reduce((total, pair) => {\\n        return (\\n          total + findMinimumStepCost(pair, robotCount, cache, directionalPad)\\n        )\\n      }, 0)\\n      return pairsCost < minimum ? pairsCost : minimum\\n    }, Number.POSITIVE_INFINITY)\\n\\n    score += minCost * parseInt(line.slice(0, line.length - 1))\\n  }\\n  return score\\n}\\n\\nfunction generateKeyDictionaries(): {\\n  numPad: Map<string, Key>\\n  directionalPad: Map<string, Key>\\n} {\\n  const numKeys = ['789', '456', '123', ' 0A']\\n  const dirKeys = [' ^A', '<v>']\\n  const directionalPad = new Map<string, Key>()\\n  const numPad = new Map<string, Key>()\\n  dirKeys\\n    .flatMap((row, y) => row.split('').map((c, x) => ({ x, y, c })))\\n    .forEach((key) => {\\n      if (key.c != ' ') directionalPad.set(key.c, key)\\n    })\\n  numKeys\\n    .flatMap((row, y) => row.split('').map((c, x) => ({ x, y, c })))\\n    .forEach((key) => {\\n      if (key.c != ' ') numPad.set(key.c, key)\\n    })\\n  return { numPad, directionalPad }\\n}\\n\\nfunction numPadMoves(\\n  code: string,\\n  start: string,\\n  keys: Map<string, Key>\\n): string[] {\\n  const result: string[] = []\\n  const end = code[0]\\n  const moves = generateMoves(keys.get(start)!, keys.get(end)!)\\n\\n  moves.forEach((move) => {\\n    if (code.length == 1) moves.forEach((move) => result.push(move + 'A'))\\n    else\\n      moves\\n        .flatMap((move) =>\\n          numPadMoves(code.slice(1), end, keys).map(\\n            (partialPath) => move + 'A' + partialPath\\n          )\\n        )\\n        .forEach((move) => result.push(move))\\n  })\\n  return result\\n}\\n\\nfunction generateMoves(start: Key, end: Key): string[] {\\n  const result: string[] = []\\n  const stack: { x: number; y: number; path: string[] }[] = []\\n  stack.push({ x: start.x, y: start.y, path: [] })\\n\\n  while (stack.length > 0) {\\n    const { x, y, path } = stack.shift()!\\n    if (x == end.x && y == end.y) {\\n      result.push(path.join(''))\\n      continue\\n    }\\n    const potentialNumber = parseInt(end.c)\\n    if (x == 0 && y == 3 && !isNaN(potentialNumber)) continue\\n    if (x == 0 && y == 0 && isNaN(potentialNumber)) continue\\n\\n    if (x != end.x)\\n      stack.push(\\n        x < end.x\\n          ? { x: x + 1, y, path: [...path, '>'] }\\n          : { x: x - 1, y, path: [...path, '<'] }\\n      )\\n    if (y != end.y)\\n      stack.push(\\n        y < end.y\\n          ? { x, y: y + 1, path: [...path, 'v'] }\\n          : { x, y: y - 1, path: [...path, '^'] }\\n      )\\n  }\\n  return result\\n}\\n\\nfunction findMinimumStepCost(\\n  step: string[],\\n  robotCount: number,\\n  cache: RobotCache,\\n  directionalPad: Map<string, Key>\\n): number {\\n  let cachedValue = cache.tryGetCache(step[0], step[1], robotCount)\\n  if (!cachedValue) {\\n    const moves = generateMoves(\\n      directionalPad.get(step[0])!,\\n      directionalPad.get(step[1])!\\n    )\\n\\n    cachedValue = moves.reduce((min, move) => {\\n      const paths = (move + 'A')\\n        .split('')\\n        .map((c, i) => [i == 0 ? 'A' : move[i - 1], c])\\n\\n      const cost = pathCost(paths, robotCount, cache, directionalPad)\\n\\n      return cost > min ? min : cost\\n    }, Number.POSITIVE_INFINITY)\\n\\n    cache.setCache(step[0], step[1], robotCount, cachedValue)\\n  }\\n  return cachedValue\\n}\\n\\nfunction pathCost(\\n  paths: string[][],\\n  robotCount: number,\\n  cache: RobotCache,\\n  directionalPad: Map<string, Key>\\n): number {\\n  return paths.reduce((total, path) => {\\n    return robotCount == 1\\n      ? total + 1\\n      : total + findMinimumStepCost(path, robotCount - 1, cache, directionalPad)\\n  }, 0)\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    return FindComplexity(2);\\n}\\n\\nprivate long FindComplexity(int robotCount)\\n{\\n    var (numpad, directionalKeys) = GenerateKeyDictionaries();\\n    var cache = new Dictionary<(char a, char b, int robots), long>();\\n    var score = 0L;\\n\\n    foreach (var line in Input)\\n    {\\n        var moves = NumpadMoves(line, 'A', numpad);\\n\\n        var min = moves.Min(move =>\\n        {\\n            var pairs = move.Select((c, i) => (a: i == 0 ? 'A' : move[i - 1], b: c)).ToArray();\\n            return pairs.Select(p => FindMinimumCost(p, robotCount, cache, directionalKeys)).Sum();\\n        });\\n\\n        score += min * int.Parse(line[..^1]);\\n\\n    }\\n    return score;\\n}\\n\\nprivate static (Dictionary<char, Key> num, Dictionary<char, Key> dir) GenerateKeyDictionaries()\\n{\\n    string[] numKeys = [\\\"789\\\", \\\"456\\\", \\\"123\\\", \\\" 0A\\\"];\\n    string[] dirKeys = [\\\" ^A\\\", \\\"<v>\\\"];\\n    Dictionary<char, Key> directionalKeys = dirKeys.SelectMany((row, y) => row.Select((value, x) => new Key(x, y, value)))\\n                                                   .Where(z => z.C != ' ')\\n                                                   .ToDictionary(key => key.C);\\n\\n    Dictionary<char, Key> numpad = numKeys.SelectMany((row, y) => row.Select((value, x) => new Key(x, y, value)))\\n                                          .Where(z => z.C != ' ')\\n                                          .ToDictionary(key => key.C);\\n\\n    return (numpad, directionalKeys);\\n}\\n\\nprivate static long FindMinimumCost((char a, char b) step, int robotCount, Dictionary<(char a, char b, int robotCount), long> cache, Dictionary<char, Key> directionalKeys)\\n{\\n    if (!cache.TryGetValue((step.a, step.b, robotCount), out var minCost))\\n    {\\n        var moves = GenerateMoves(directionalKeys[step.a], directionalKeys[step.b]);\\n\\n        sminCost = moves.Min(move =>\\n        {\\n            var paths = move.Append('A')\\n            .Select((c, i) => (a: i == 0 ? 'A' : move[i - 1], b: c))\\n            .ToArray();\\n\\n            return PathCost(paths, robotCount, cache, directionalKeys);\\n        });\\n        cache[(step.a, step.b, robotCount)] = minCost;\\n    }\\n    return minCost;\\n\\n    static long PathCost((char a, char b)[] paths, int robotCount, Dictionary<(char a, char b, int robotCount), long> cache, Dictionary<char, Key> directionalKeys) =>\\n    paths.Sum(x => robotCount == 1 ? 1 : FindMinimumCost(x, robotCount - 1, cache, directionalKeys));\\n\\n}\\n\\nprivate static IEnumerable<string> NumpadMoves(string code, char startPosition, Dictionary<char, Key> keys)\\n{\\n    var end = code[0];\\n    var moves = GenerateMoves(keys[startPosition], keys[code[0]]);\\n\\n    foreach (var move in moves)\\n    {\\n        if (code.Length == 1)\\n            return moves.Select(x => x + 'A');\\n        else\\n            return moves.SelectMany(x => NumpadMoves(code[1..], end, keys).Select(partialpath => x + 'A' + partialpath));\\n    }\\n    return [];\\n}\\n\\nprivate static IEnumerable<string> GenerateMoves(Key startKey, Key endKey)\\n{\\n    Stack<(int x, int y, List<char> path)> stack = [];\\n    stack.Push((startKey.X, startKey.Y, []));\\n    while (stack.Count > 0)\\n    {\\n        var (x, y, path) = stack.Pop();\\n        if (x == endKey.X && y == endKey.Y)\\n        {\\n            yield return new string([.. path]);\\n            continue;\\n        }\\n\\n        if (int.TryParse(endKey.C.ToString(), out var val))\\n        {\\n            if (x == 0 && y == 3)\\n                continue;\\n        }\\n        else if (x == 0 && y == 0)\\n            continue;\\n\\n        if (x != endKey.X)\\n            stack.Push(x < endKey.X ? (x + 1, y, new(path) { '>' }) : (x - 1, y, new(path) { '<' }));\\n\\n        if (y != endKey.Y)\\n            stack.Push(y < endKey.Y ? (x, y + 1, new(path) { 'v' }) : (x, y - 1, new(path) { '^' }));\\n    }\\n}\\ninternal struct Key(int x, int y, char c)\\n{\\n    internal int X = x;\\n    internal int Y = y;\\n    internal char C = c;\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"Same thing but with a considerably bigger number of robots to ensure you're got an efficient solution!\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"two\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  return findComplexity(25, input)\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    return FindComplexity(25);\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2024/21.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","href","boxname","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}