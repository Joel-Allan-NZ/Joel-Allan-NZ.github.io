{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2024-22-mdx-39bd2ca8b588248391b4.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2024/22.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    em: \"em\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"A lot of words to say you need to implement a simple update-the-secret function. I opted for bit shifting over multiplying/dividing by powers of two, but I don't think it leads to anything like a measurable difference.\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"one\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const secrets = input.map((x) => parseInt(x))\\n\\n  return secrets.reduce((total, secret) => {\\n    for (let i = 0; i < 2000; i++) secret = getNextSecret(secret)\\n\\n    return total + secret\\n  }, 0)\\n}\\n\\nfunction getNextSecret(secret: number): number {\\n  secret ^= secret << 6\\n  secret = ((secret % 16777216) + 16777216) % 16777216\\n\\n  secret ^= secret >> 5\\n  secret = ((secret % 16777216) + 16777216) % 16777216\\n\\n  secret ^= secret << 11\\n  return ((secret % 16777216) + 16777216) % 16777216\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    var secrets = Input.Select(x => long.Parse(x));\\n\\n    return secrets.Sum(secret =>\\n    {\\n        for (int i = 0; i < 2000; i++)\\n            secret = GetNextSecret(secret);\\n\\n        return secret;\\n    });\\n}\\n\\nprivate static long GetNextSecret(long secret)\\n{\\n    secret ^= (secret << 6);\\n    secret %= 16777216;\\n\\n    secret ^= (secret >> 5);\\n    secret %= 16777216;\\n\\n    secret ^= (secret << 11);\\n    return secret % 16777216;\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"A very straightforward approach, but I use a couple small tricks for performance. Firstly, I use a little addition to treat the possible changes/differences between consecutive secrets as a number between 0 and 19. Pairing this with a 4-dimensional array allows for very quick access; quicker than repeatedly needing to hash values.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Secondly, I \", React.createElement(_components.em, null, \"do\"), \" use some hashing with a little bit of a lazy hash function where\\nI generate a number without collisions from the four entries in \", React.createElement(_components.code, null, \"lastFour\"), \". Quicker\\nin this instance than repeatedly reinitializing the set of arrays.\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"two\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const secrets = input.map((x) => parseInt(x))\\n  const permTotals: number[][][][] = []\\n  for (let i = 0; i < 19; i++) {\\n    permTotals.push([])\\n    for (let j = 0; j < 19; j++) {\\n      permTotals[i].push([])\\n      for (let k = 0; k < 19; k++) permTotals[i][j].push(Array(19).fill(0))\\n    }\\n  }\\n  let max = 0\\n  secrets.forEach(\\n    (secret) => (max = countSecretTotals(secret, permTotals, max))\\n  )\\n  return max\\n}\\n\\nfunction countSecretTotals(\\n  secret: number,\\n  permTotals: number[][][][],\\n  max: number\\n) {\\n  const seen = new Set<number>()\\n  const secretValues: number[] = [secret % 10]\\n\\n  for (let i = 0; i < 2000; i++) {\\n    secret = getNextSecret(secret)\\n    secretValues.push(secret % 10)\\n\\n    if (i > 2) {\\n      const lastFour = [\\n        9 + secretValues[i + 1] - secretValues[i],\\n        9 + secretValues[i] - secretValues[i - 1],\\n        9 + secretValues[i - 1] - secretValues[i - 2],\\n        9 + secretValues[i - 2] - secretValues[i - 3],\\n      ]\\n      const s =\\n        lastFour[0] * 1000000 +\\n        lastFour[1] * 10000 +\\n        lastFour[2] * 100 +\\n        lastFour[3]\\n\\n      if (!seen.has(s)) {\\n        const res =\\n          permTotals[lastFour[0]][lastFour[1]][lastFour[2]][lastFour[3]] +\\n          (secret % 10)\\n        permTotals[lastFour[0]][lastFour[1]][lastFour[2]][lastFour[3]] = res\\n        if (res > max) max = res\\n        seen.add(s)\\n      }\\n    }\\n  }\\n  return max\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    var secrets = Input.Select(x => long.Parse(x));\\n    int[,,,] permTotals = new int[19, 19, 19, 19];\\n    long max = 0;\\n\\n    foreach (var secret in secrets)\\n    {\\n        max = CountSecretTotals(secret, permTotals, max);\\n    }\\n    return max;\\n}\\n\\nprivate static long CountSecretTotals(long secret, int[,,,] permTotals, long max)\\n{\\n    HashSet<int> seen = [];\\n    int[] secrets = new int[2001];\\n    secrets[0] = (int)(secret % 10);\\n\\n    for (int i = 0; i < 2000; i++)\\n    {\\n        secret = GetNextSecret(secret);\\n        secrets[i + 1] = (int)(secret % 10);\\n        if (i > 2)\\n        {\\n            int[] lastFour = [secrets[i + 1] - secrets[i] + 9,\\n                secrets[i] - secrets[i - 1] + 9,\\n                secrets[i - 1] - secrets[i - 2] + 9,\\n                secrets[i - 2] - secrets[i - 3] + 9];\\n            var s = lastFour[0] * 1000000 + lastFour[1] * 10000 + lastFour[2] * 100 + lastFour[3];\\n\\n            if (!seen.Contains(s))\\n            {\\n                var res = permTotals[lastFour[0], lastFour[1], lastFour[2], lastFour[3]] + (int)(secret % 10);\\n                permTotals[lastFour[0], lastFour[1], lastFour[2], lastFour[3]] = res;\\n                if (res > max)\\n                    max = res;\\n\\n                seen.Add(s);\\n            }\\n        }\\n    }\\n    return max;\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2024/22.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","em","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","boxname","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}