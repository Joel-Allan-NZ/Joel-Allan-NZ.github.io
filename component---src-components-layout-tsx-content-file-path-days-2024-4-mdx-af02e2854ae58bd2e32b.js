"use strict";(self.webpackChunkjoel_allan_nz_github_io=self.webpackChunkjoel_allan_nz_github_io||[]).push([[8112],{1591:function(e,n,t){t.r(n),t.d(n,{Head:function(){return f},default:function(){return g}});var r=t(8453),a=t(6540);function o(e){const n=Object.assign({h2:"h2",p:"p",em:"em",code:"code",pre:"pre",ul:"ul",li:"li"},(0,r.RP)(),e.components),{CodeBox:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeBox",!0),a.createElement(a.Fragment,null,a.createElement(n.h2,null,"Part One"),"\n",a.createElement(n.p,null,"Another day revolving around text searching! Luckily it's a wordsearch rather than just more piles of regex."),"\n",a.createElement("br"),"\n",a.createElement(n.p,null,"I opted not to try to get too clever with this one, instead using basic regexp and\na single diagonal search (left-to-right, top-to-bottom) to count half of the possible\n",a.createElement(n.em,null,"XMAS"),"/",a.createElement(n.em,null,"SMAX")," matches, then repeating that process on a version of the input that\nhad been rotated 90 degrees clockwise."),"\n",a.createElement("br"),"\n",a.createElement(n.p,null,"The C# version uses a slightly different regexp with a positive lookahead to smoosh\nthe search for ",a.createElement(n.em,null,"XMAS/SMAX")," into a single expression, but I opted to keep it as two\nseperate searches in typescript, favouring the simpler readability."),"\n",a.createElement("br"),"\n",a.createElement(n.p,null,"I'm certainly not in love with the way prettier has arranged the parentheses within\n",a.createElement(n.code,null,"countDiagonal()"),", but hopefully it's still reasonably legible here."),"\n",a.createElement(t,{names:"typescript|C#"},a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"export function partOne(input: string[]): number | string {\n  return [input, rotateStringArray(input)].reduce((total, current) => {\n    const straight = current.reduce(\n      (t, c) =>\n        t + (c.match(/XMAS/g)?.length ?? 0) + (c.match(/SAMX/g)?.length ?? 0),\n      0\n    )\n    return total + straight + countDiagonal(current)\n  }, 0)\n}\n\nfunction rotateStringArray(input: string[]): string[] {\n  const rotated: string[] = []\n  for (let i = 0; i < input[0].length; i++) {\n    rotated.push(\n      input\n        .map((current) => current[i])\n        .reverse()\n        .join('')\n    )\n  }\n  return rotated\n}\n\nfunction countDiagonal(input: string[]): number {\n  return input.reduce((total, current, y) => {\n    return (\n      total +\n      current\n        .split('')\n        .reduce(\n          (t, c, x) =>\n            IsMatchStartPoint(input, x, y, [0, 1, 2, 3]) ? t + 1 : t,\n          0\n        )\n    )\n  }, 0)\n}\n")),a.createElement(n.pre,null,a.createElement(n.code,{className:"language-csharp"},'public override object PartOne()\n{\n  var rotated = Enumerable.Range(1, Input[0].Length)\n                          .Select(i => new string(Input.Select(x => x[^i]).ToArray()))\n                          .ToArray();\n\n  List<string[]> searchSpaces = [Input, rotated];\n  return searchSpaces.Sum(s => countMatches(s));\n\n  static int countMatches(string[] s)\n  {\n      var straightLine = s.Sum(line => XmasRegex().Matches(line).Count);\n      return straightLine + LeftToRightDownDiagonal(s);\n  }\n}\n\nprivate static int LeftToRightDownDiagonal(string[] input)\n{\n  int[] range = [0, 1, 2, 3];\n  var xmas = "XMAS";\n  int count = 0;\n\n  for (int y = 0; y < input.Length - 3; y++)\n  {\n      for (int x = 0; x < input[y].Length - 3; x++)\n          if (IsMatchStartPoint(x, y))\n              count++;\n  }\n  return count;\n\n  bool IsMatchStartPoint(int x, int y)\n  {\n      return range.All(offset => input[y + offset][x + offset] == xmas[offset]) ||\n          range.All(offset => input[y + offset][x + offset] == xmas[^(offset + 1)]);\n  }\n}\n\n[GeneratedRegex(@"(?=(XMAS|SAMX))")]\ninternal static partial Regex XmasRegex();\n'))),"\n",a.createElement(n.h2,null,"Part Two"),"\n",a.createElement(n.p,null,"A rarity where the second part is less fiddly than the first!"),"\n",a.createElement(n.p,null,a.createElement("br"),"I approached the problem by acknowledging that a valid MAS X must have:"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,"A central 'A'"),"\n",a.createElement(n.li,null,"Two 'M's, and two 'S's in the corners (ie on diagonals to the central 'A')"),"\n",a.createElement(n.li,null,"The 'M' and 'S' must be on opposite sides of the central 'A'; 'MAM' or 'SAS' are no good. If our other conditions are already true, we only need to check one 'SAM'/'MAS'"),"\n"),"\n",a.createElement("br"),"\n",a.createElement(n.p,null,"From there it's simply a matter of checking 'A' values in valid locations, and confirming\nthey have the correct corners around them."),"\n",a.createElement("br"),"\n",a.createElement(n.p,null,"Once again prettier is not terribly helpful at making nested ",a.createElement(n.code,null,"Array.prototype.reduce()"),"\nlegible outside of the editor itself, but hopefully this is readable enough!"),"\n",a.createElement(t,{names:"typescript|C#"},a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"export function partTwo(input: string[]): number | string {\n  return input.reduce((total, current, y) => {\n    return (\n      total +\n      current\n        .split('')\n        .reduce(\n          (t, c, x) =>\n            input[y][x] == 'A' && isACross(input, y, x) ? t + 1 : t,\n          0\n        )\n    )\n  }, 0)\n}\n\nfunction isACross(input: string[], y: number, x: number): boolean {\n  if (x == 0 || y == 0 || y > input.length - 2 || x > input[y].length - 2)\n    return false\n\n  const corners = [\n    input[y - 1][x - 1],\n    input[y + 1][x - 1],\n    input[y - 1][x + 1],\n    input[y + 1][x + 1],\n  ]\n  const count = { M: 0, S: 0, X: 0, A: 0 }\n  corners.forEach((x) => count[x as keyof typeof count]++)\n\n  return count.M == 2 && count.S == 2 && corners[0] != corners[3]\n}\n")),a.createElement(n.pre,null,a.createElement(n.code,{className:"language-csharp"},"public override object PartTwo()\n{\n  int count = 0;\n  for (int y = 1; y < Input.Length - 1; y++)\n  {\n      for (int x = 1; x < Input[y].Length - 1; x++)\n      {\n          if (Input[y][x] == 'A' && IsACross(y, x))\n              count++;\n      }\n  }\n  return count;\n}\nprivate bool IsACross(int x, int y)\n{\n  List<char> corners =\n  [\n      Input[x - 1][y - 1],\n      Input[x + 1][y - 1],\n      Input[x - 1][y + 1],\n      Input[x + 1][y + 1]\n  ];\n  return corners[0] != corners[3]\n      && corners.Count(x => x == 'M') == 2\n      && corners.Count(x => x == 'S') == 2;\n}\n"))))}var l=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.RP)(),e.components);return n?a.createElement(n,e,a.createElement(o,e)):o(e)};var i=t(2779),c=t(7206),s=t(791),u=t(4813),p=t(572);const m={CodeBox:i.A};function h(e){let{pageContext:n,children:t}=e;return a.createElement(a.Fragment,null,a.createElement(u.A,null),a.createElement("div",{className:"min-h-screen bg-chicPrimary"},a.createElement(s.A,{props:n.list}),a.createElement("div",{className:"adventofcode max-w-[60%] ml-[20%]"},a.createElement("h1",null,a.createElement("a",{href:"https://adventofcode.com/"+n.year+"/day/"+n.puzz},n.year+" Day "+n.puzz+" - "+n.title)),a.createElement(r.xA,{components:m},t),n.puzz&&n.year?a.createElement(c.A,{year:n.year,puzz:n.puzz}):a.createElement(a.Fragment,null))),a.createElement(p.A,null))}function g(e){return a.createElement(h,e,a.createElement(l,e))}const f=()=>a.createElement(a.Fragment,null,a.createElement("title",null,"Joel-Allan-NZ - Advent of Code"),a.createElement("html",{lang:"en"}),a.createElement("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),a.createElement("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),a.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap",rel:"stylesheet"}))}}]);
//# sourceMappingURL=component---src-components-layout-tsx-content-file-path-days-2024-4-mdx-af02e2854ae58bd2e32b.js.map