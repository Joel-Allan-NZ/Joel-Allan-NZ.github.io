{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2024-2-mdx-c06d0e495a65038205b8.js","mappings":"sOAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,KAAM,OACNC,IAAK,QACJC,EAAAA,EAAAA,MAAsBR,EAAMS,aAAa,QAACC,GAAWT,EAExD,OADKS,GAoBP,SAA8BC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAtBgBG,CAAqB,WAAW,GACvCC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,oOAAqO,KAAMU,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,sMAAuM,KAAMU,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,6IAA8IU,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,2BAA4B,cAAeS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,yBAA0B,4DAA6D,KAAMS,EAAAA,cAAoBL,EAAS,CAC3kCM,MAAO,iBACND,EAAAA,cAAoBd,EAAYM,IAAK,KAAMQ,EAAAA,cAAoBd,EAAYK,KAAM,CAClFW,UAAW,eACV,smBAAumBF,EAAAA,cAAoBd,EAAYM,IAAK,KAAMQ,EAAAA,cAAoBd,EAAYK,KAAM,CACzrBW,UAAW,mBACV,iuBAAkuB,KAAMF,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,yLAA0LU,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,mBAAoB,WAAYS,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,0BAA2B,6CAA8C,KAAMS,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,wBAAyBU,EAAAA,cAAoBd,EAAYK,KAAM,KAAM,YAAa,qDAAsD,KAAMS,EAAAA,cAAoBL,EAAS,CACp6CM,MAAO,iBACND,EAAAA,cAAoBd,EAAYM,IAAK,KAAMQ,EAAAA,cAAoBd,EAAYK,KAAM,CAClFW,UAAW,eACV,uiBAAwiBF,EAAAA,cAAoBd,EAAYM,IAAK,KAAMQ,EAAAA,cAAoBd,EAAYK,KAAM,CAC1nBW,UAAW,mBACV,wmBACL,CAKA,MAJA,SAAoBjB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOkB,QAASC,GAAajB,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOU,EAAYJ,EAAAA,cAAoBI,EAAWnB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oDCpBA,MAAMoB,EAAa,CACjBV,QAAOA,EAAAA,GAET,SAASW,EAAOC,GACd,IAAI,YAACC,EAAW,SAAEC,GAAYF,EAC9B,OAAOP,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBU,EAAAA,EAAQ,MAAOV,EAAAA,cAAoB,MAAO,CAC7GE,UAAW,+BACVF,EAAAA,cAAoBW,EAAAA,EAAe,CACpC1B,MAAOuB,EAAYI,OACjBZ,EAAAA,cAAoB,MAAO,CAC7BE,UAAW,qCACVF,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,IAAK,CAC1Da,KAAM,4BAA8BL,EAAYM,KAAO,QAAUN,EAAYO,MAC5EP,EAAYM,KAAO,QAAUN,EAAYO,KAAO,MAAQP,EAAYQ,QAAShB,EAAAA,cAAoBiB,EAAAA,GAAa,CAC/GvB,WAAYW,GACXI,GAAWD,EAAYO,MAAQP,EAAYM,KAAOd,EAAAA,cAAoBkB,EAAAA,EAAa,CACpFJ,KAAMN,EAAYM,KAClBC,KAAMP,EAAYO,OACff,EAAAA,cAAoBA,EAAAA,SAAgB,QAASA,EAAAA,cAAoBmB,EAAAA,EAAQ,MAChF,CACe,SAASC,EAAiBnC,GACvC,OAAOe,EAAAA,cAAoBM,EAAQrB,EAAOe,EAAAA,cAAoBqB,EAAqBpC,GACrF,CACO,MAAMqC,EAAOA,IAAMtB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,QAAS,KAAM,kCAAmCA,EAAAA,cAAoB,OAAQ,CACpKuB,KAAM,OACJvB,EAAAA,cAAoB,OAAQ,CAC9BwB,IAAK,aACLX,KAAM,iCACJb,EAAAA,cAAoB,OAAQ,CAC9BwB,IAAK,aACLX,KAAM,8BACJb,EAAAA,cAAoB,OAAQ,CAC9Ba,KAAM,mKACNW,IAAK,e","sources":["webpack://joel-allan-nz.github.io/./days/2024/2.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Another simple problem to warm us up. We must count all lines in the input where there's a monotonic increase (or decrease) beween values on that line,\\nand no consecutive values on the line have a difference greater than 3.\"), \"\\n\", React.createElement(_components.p, null, \"I chose to approach it by considering each number but the last - comparing each number\\nto the following number, and discovering if we're increasing or decreasing from\\nthe first pair of values.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"There is a cost to this (we need to check equality between the paired values), but\\na cleaner solution doesn't leap to mind. JavaScript's \", React.createElement(_components.code, null, \"Array.prototype.every()\"), \" and\\nC#'s \", React.createElement(_components.code, null, \"Linq.Enumerable.All()\"), \" both stop evaluating as soon as they resolve a failure.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"function partOne(input: string[]): number | string {\\n  return input.reduce((sum, current) => {\\n    const parsedLine = current.split(/\\\\s+/).map((y) => parseInt(y))\\n    return areLevelsSafe(parsedLine) ? sum + 1 : sum\\n  }, 0)\\n}\\n\\nfunction areLevelsSafe(levels: number[]): boolean {\\n  let increasing: boolean | null = null\\n\\n  return levels.slice(0, -1).every((current, index) => {\\n    increasing ??= levels[index + 1] > current\\n\\n    return (\\n      increasing == levels[index + 1] > current &&\\n      levels[index + 1] != current &&\\n      Math.abs(levels[index + 1] - current) < 4\\n    )\\n  })\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    var parsedInput = Input.Select(x => x.Split(' ', StringSplitOptions.RemoveEmptyEntries)\\n                                          .Select(x => int.Parse(x))\\n                                          .ToList());\\n    return parsedInput.Count(line => AreLevelsSafe(line));\\n}\\n\\nprivate static bool AreLevelsSafe(List<int> levels)\\n{\\n    bool? increasing = null;\\n\\n    return Enumerable.Range(0, levels.Count - 1).All(index =>\\n    {\\n        increasing ??= levels[index + 1] > levels[index];\\n\\n        return increasing == levels[index + 1] > levels[index] &&\\n            Math.Abs(levels[index + 1] - levels[index]) < 4 &&\\n            levels[index + 1] != levels[index];\\n    });\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"Identical to part one, except if a line fails we must then also check if the line has at most a single 'bad' value. My somewhat lazy approach is to just feed partial lines back into \", React.createElement(_components.code, null, \"areLevelsSafe()\"), \", using \", React.createElement(_components.code, null, \"Array.prototype.find()\"), \" to stop checking sub-lines on a success.\"), \"\\n\", React.createElement(_components.p, null, \"Explicitly declaring \", React.createElement(_components.code, null, \"subLevel\"), \" is strictly unnecessary, but a bit more readable\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  return input.reduce((sum, current) => {\\n    const parsedLine = current.split(/\\\\s+/).map((y) => parseInt(y))\\n    return areLevelsSafeWithDampener(parsedLine) ? sum + 1 : sum\\n  }, 0)\\n}\\n\\nfunction areLevelsSafeWithDampener(levels: number[]): boolean {\\n  return (\\n    areLevelsSafe(levels) ||\\n    levels.find((level, index) => {\\n      const subLevel = [...levels.slice(0, index), ...levels.slice(index + 1)]\\n      return areLevelsSafe(subLevel)\\n    }) !== undefined\\n  )\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    var parsedInput = Input.Select(x => x.Split(' ', StringSplitOptions.RemoveEmptyEntries)\\n                                          .Select(x => int.Parse(x))\\n                                          .ToList());\\n    return parsedInput.Count(line => AreLevelsSafeWithDampener(line));\\n}\\n\\nprivate static bool AreLevelsSafeWithDampener(List<int> levels)\\n{\\n    if (AreLevelsSafe(levels))\\n        return true;\\n\\n    return Enumerable.Range(0, levels.Count).Any(index =>\\n    {\\n        return AreLevelsSafe(levels.Where((x, i) => i != index).ToList());\\n    });\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2024/2.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}