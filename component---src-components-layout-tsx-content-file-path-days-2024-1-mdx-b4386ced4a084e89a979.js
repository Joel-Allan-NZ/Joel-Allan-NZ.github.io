"use strict";(self.webpackChunkjoel_allan_nz_github_io=self.webpackChunkjoel_allan_nz_github_io||[]).push([[137],{3239:function(e,t,n){n.r(t),n.d(t,{Head:function(){return f},default:function(){return g}});var r=n(8453),l=n(6540);function a(e){const t=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code"},(0,r.RP)(),e.components),{CodeBox:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeBox",!0),l.createElement(l.Fragment,null,l.createElement(t.h2,null,"Part One"),"\n",l.createElement(t.p,null,"This is a nice straight-forward start to the year's AOC puzzles - sorting two lists and totalling the differences between values at each index."),"\n",l.createElement(n,{names:"typescript|C#"},l.createElement(t.pre,null,l.createElement(t.code,{className:"language-js"},"function partOne(input: string[]): number | string {\n  const left: number[] = []\n  const right: number[] = []\n\n  input.forEach((x) => {\n    const s = x.split(/\\s+/).map((y) => parseInt(y))\n    left.push(s[0])\n    right.push(s[1])\n  })\n  right.sort()\n\n  return left\n    .sort()\n    .reduce((sum, current, index) => sum + Math.abs(right[index] - current), 0)\n}\n")),l.createElement(t.pre,null,l.createElement(t.code,{className:"language-csharp"},"public override object PartOne()\n{\n    List<int> left = [];\n    List<int> right = [];\n    foreach (var line in Input)\n    {\n        var split = line.Split(' ', StringSplitOptions.RemoveEmptyEntries);\n        left.Add(int.Parse(split[0]));\n        right.Add(int.Parse(split[1]));\n    }\n    left.Sort();\n    right.Sort();\n\n    return Enumerable.Range(0, left.Count).Sum(x => Math.Abs(left[x] - right[x]));\n}\n"))),"\n",l.createElement(t.h2,null,"Part Two"),"\n",l.createElement(t.p,null,"Equally as straight-forward, we just need to total each number in the left list, multiplied by how many times that respective number appears in the right list."),"\n",l.createElement(t.p,null,l.createElement("br"),"I chose to use a Map/Dictionary rather than repeatedly iterating over the\nsecond list purely for performance reasons over an abritrarily long list. Not at\nall relevant for today's puzzle, but Big O habits die hard."),"\n",l.createElement(n,{names:"typescript|C#"},l.createElement(t.pre,null,l.createElement(t.code,{className:"language-ts"},"function partTwo(input: string[]): number | string {\n  const left: number[] = []\n  const right: Map<number, number> = new Map()\n\n  input.forEach((x) => {\n    const s = x.split(/\\s+/).map((y) => parseInt(y))\n    left.push(s[0])\n    right.set(s[1], (right.get(s[1]) ?? 0) + 1)\n  })\n\n  return left.reduce(\n    (sum, current) => sum + current * (right.get(current) ?? 0),\n    0\n  )\n}\n")),l.createElement(t.pre,null,l.createElement(t.code,{className:"language-csharp"},"public override object PartTwo()\n{\n    List<int> left = [];\n    Dictionary<int, int> occurences = [];\n    foreach (var line in Input)\n    {\n        var split = line.Split(' ', StringSplitOptions.RemoveEmptyEntries);\n        left.Add(int.Parse(split[0]));\n        occurences.IncrementOrAddKey(int.Parse(split[1]));\n    }\n\n    return left.Sum(x => occurences.TryGetValue(x, out int count) ? x * count : 0);\n}\n"))))}var i=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,r.RP)(),e.components);return t?l.createElement(t,e,l.createElement(a,e)):a(e)};var s=n(2779),c=n(7206),o=n(791),u=n(4813),m=n(572);const p={CodeBox:s.A};function h(e){let{pageContext:t,children:n}=e;return l.createElement(l.Fragment,null,l.createElement(u.A,null),l.createElement("div",{className:"min-h-screen bg-chicPrimary"},l.createElement(o.A,{props:t.list}),l.createElement("div",{className:"adventofcode max-w-[60%] ml-[20%]"},l.createElement("h1",null,l.createElement("a",{href:"https://adventofcode.com/"+t.year+"/day/"+t.puzz},t.year+" Day "+t.puzz+" - "+t.title)),l.createElement(r.xA,{components:p},n),t.puzz&&t.year?l.createElement(c.A,{year:t.year,puzz:t.puzz}):l.createElement(l.Fragment,null))),l.createElement(m.A,null))}function g(e){return l.createElement(h,e,l.createElement(i,e))}const f=()=>l.createElement(l.Fragment,null,l.createElement("title",null,"Joel-Allan-NZ - Advent of Code"),l.createElement("html",{lang:"en"}),l.createElement("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),l.createElement("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),l.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap",rel:"stylesheet"}))}}]);
//# sourceMappingURL=component---src-components-layout-tsx-content-file-path-days-2024-1-mdx-b4386ced4a084e89a979.js.map