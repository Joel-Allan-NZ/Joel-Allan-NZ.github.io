{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2023-5-mdx-d663a9bf48619a8e39f8.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2023/5.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Whew, that was pretty verbose.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"The idea here is to map each map to the next map, then the result of those merged\\nmaps to the next map, continuing until all maps have been merged. For discrete values\\nthis would be vanishingly simple, but of course we're dealing with ranges of values.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"To make it more readable for myself I switched up the three-value setup: instead\\nof a new value, a start value, and a range value like the input, I opted for a start\\nvalue, an end value, and an offset. So for the the first example \", React.createElement(_components.code, null, \"seed-to-soil\"), \" map,\\n\", React.createElement(_components.code, null, \"50 98 2\"), \" becomes \", React.createElement(_components.code, null, \"start: 98, end:99, offset:-48\"), \".\\n\", React.createElement(\"br\"), \" From there it's a matter of merging each set of maps, creating new ranges\\nthat reflect the offsets from each of the merged maps. I sort the values for\\neach map in ascending order, then only consider the smallest at any given point\\nin time, constructing new ranges from any overlap (or lackthereof).\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const { seeds, reduced } = parseAndReduce(input)\\n\\n  return seeds.reduce((min, seed) => {\\n    const inRange = reduced.find(\\n      (range) => range.start <= seed && range.end >= seed\\n    )\\n    const value = inRange ? seed + inRange.offset : seed\\n    return min < value ? min : value\\n  }, 2 ** 63)\\n}\\n\\ninterface OffsetRange {\\n  start: number\\n  end: number\\n  offset: number\\n}\\n\\nfunction parseAndReduce(input: string[]): {\\n  seeds: number[]\\n  reduced: OffsetRange[]\\n} {\\n  const seeds = input[0]\\n    .split(' ')\\n    .slice(1)\\n    .map((x) => parseInt(x))\\n\\n  let reduced: OffsetRange[] = []\\n  let next: OffsetRange[] = []\\n\\n  for (let i = 3; i < input.length; i++) {\\n    const line = input[i]\\n    if (!line || line.length == 0) {\\n      i++\\n      reduced = reduced.length == 0 ? next : merge(reduced, next)\\n      next = []\\n    } else {\\n      const split = line.split(' ').map((x) => parseInt(x))\\n      next.push({\\n        start: split[1],\\n        end: split[2] + split[1] - 1,\\n        offset: split[0] - split[1],\\n      })\\n    }\\n  }\\n  return { seeds, reduced: merge(reduced, next) }\\n}\\n\\nfunction merge(a: OffsetRange[], b: OffsetRange[]): OffsetRange[] {\\n  const result: OffsetRange[] = []\\n  a.sort((x, y) => x.start + x.offset - (y.start + y.offset))\\n  b.sort((x, y) => x.start - y.start)\\n  let aRange = a.shift()\\n  let bRange = b.shift()\\n\\n  while (aRange && bRange) {\\n    result.push(mergeRanges(aRange, bRange))\\n\\n    if (aRange.end < aRange.start) aRange = a.shift()\\n    if (bRange.end < bRange.start) bRange = b.shift()\\n  }\\n\\n  if (aRange && aRange.end >= aRange.start) result.push(aRange)\\n  if (bRange && bRange.end >= bRange.start) result.push(bRange)\\n\\n  return [...result, ...b, ...a]\\n}\\n\\nfunction mergeRanges(aRange: OffsetRange, bRange: OffsetRange): OffsetRange {\\n  let result: OffsetRange = { start: 0, end: 0, offset: 0 }\\n  if (aRange.start + aRange.offset == bRange.start) {\\n    const end = Math.min(aRange.end + aRange.offset, bRange.end) - aRange.offset\\n    result = { start: aRange.start, end, offset: aRange.offset + bRange.offset }\\n    aRange.start = end + 1\\n    bRange.start = end + aRange.offset + 1\\n  } else {\\n    let smaller = aRange\\n    let end = 0\\n    if (aRange.start + aRange.offset < bRange.start) {\\n      end = Math.min(aRange.end, bRange.start - 1 - aRange.offset)\\n    } else {\\n      smaller = bRange\\n      end = Math.min(bRange.end, aRange.start - 1 + aRange.offset)\\n    }\\n    result = { start: smaller.start, end, offset: smaller.offset }\\n    smaller.start = end + 1\\n  }\\n  return result\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    var (seeds, reduced) = ParseAndReduce();\\n\\n    return seeds.Min(seed =>\\n    {\\n        foreach (var range in reduced)\\n        {\\n            if (range.Start <= seed && range.End >= seed)\\n                return seed + range.Offset;\\n        }\\n        return seed;\\n    });\\n}\\n\\nprivate (List<long> Seeds, List<OffsetRange>) ParseAndReduce()\\n{\\n    var seeds = Input[0].Split(' ')[1..].Select(x => long.Parse(x)).ToList();\\n    List<OffsetRange> reduced = [];\\n    List<OffsetRange> next = [];\\n\\n    for (int i = 3; i < Input.Length; i++)\\n    {\\n        var line = Input[i];\\n        if (string.IsNullOrEmpty(line))\\n        {\\n            i++;\\n            reduced = reduced.Count == 0 ? next : Merge(reduced, next);\\n            next = [];\\n        }\\n        else\\n        {\\n            var split = line.Split(' ', StringSplitOptions.RemoveEmptyEntries).Select(x => long.Parse(x)).ToList();\\n            next.Add(new(split[1], split[2] + split[1] - 1, split[0] - split[1]));\\n        }\\n    }\\n    return (seeds, Merge(reduced, next));\\n}\\n\\nprivate static List<OffsetRange> Merge(List<OffsetRange> a, List<OffsetRange> b)\\n{\\n    List<OffsetRange> result = [];\\n    Queue<OffsetRange> sortedA = new(a.OrderBy(x => x.Start + x.Offset));\\n    Queue<OffsetRange> sortedB = new(b.OrderBy(x => x.Start));\\n    var aRange = sortedA.Dequeue();\\n    var bRange = sortedB.Dequeue();\\n\\n    while (aRange != null && bRange != null)\\n    {\\n        result.Add(MergeRanges(aRange, bRange));\\n\\n        if (aRange.End < aRange.Start)\\n            aRange = sortedA.Count > 0 ? sortedA.Dequeue() : null;\\n\\n        if (bRange.End < bRange.Start)\\n            bRange = sortedB.Count > 0 ? sortedB.Dequeue() : null;\\n    }\\n\\n    return [.. result, .. sortedB, .. sortedA];\\n}\\n\\nprivate static OffsetRange MergeRanges(OffsetRange a, OffsetRange b)\\n{\\n    OffsetRange result;\\n    if (a.Start + a.Offset == b.Start)\\n    {\\n        var end = Math.Min(a.End + a.Offset, b.End);\\n        result = new(a.Start, end - a.Offset, a.Offset + b.Offset);\\n        a.Start = end - a.Offset + 1;\\n        b.Start = end + 1;\\n    }\\n    else\\n    {\\n        var smaller = a;\\n        long end;\\n        if (a.Start + a.Offset < b.Start)\\n        {\\n            end = Math.Min(a.End, b.Start - 1 - a.Offset);\\n        }\\n        else\\n        {\\n            smaller = b;\\n            end = Math.Min(b.End, a.Start - 1 + a.Offset);\\n        }\\n        result = new(smaller.Start, end, smaller.Offset);\\n        smaller.Start = end + 1;\\n    }\\n    return result;\\n}\\n\\ninternal class OffsetRange(long start, long end, long offset)\\n{\\n    internal long Start = start;\\n    internal long End = end;\\n    internal long Offset = offset;\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"A simple approach here: After all the parsing and reducing maps of part one, all that is needed is to sort seed ranges by smallest to largest, and for each of those seed ranges in turn check for an overlap with any map range. The first we find is guaranteed to be the smallest possible\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const { seeds, reduced } = parseAndReduce(input)\\n  reduced.sort((x, y) => x.start + x.offset - (y.start + y.offset))\\n  const seedRanges = seeds\\n    .slice(1)\\n    .map((seed, index) => ({\\n      start: seeds[index],\\n      end: seeds[index] + seed - 1,\\n    }))\\n    .filter((x, i) => i % 2 == 0)\\n    .toSorted((x, y) => x.start - y.start)\\n\\n  for (const range of reduced) {\\n    for (const seedRange of seedRanges) {\\n      if (seedRange.start >= range.start && seedRange.start <= range.end)\\n        return seedRange.start + range.offset\\n      if (seedRange.start <= range.start && seedRange.end >= range.start)\\n        return range.start + range.offset\\n    }\\n  }\\n  return 'Not Found'\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    var (seeds, reduced) = ParseAndReduce();\\n    var sorted = reduced.ToArray().OrderBy(x => x.Start + x.Offset);\\n    var seedRanges = seeds[1..].Select((x, index) => (start: seeds[index], end: seeds[index] + x - 1))\\n                               .Where((x, i) => i % 2 == 0)\\n                               .OrderBy(x => x.start)\\n                               .ToList();\\n\\n    foreach (var range in sorted)\\n    {\\n        foreach (var seed in seedRanges)\\n        {\\n            var minimumOverlap = MinimumOverlap(range, seed);\\n            if (minimumOverlap != -1)\\n                return minimumOverlap + range.Offset;\\n        }\\n    }\\n    return -1;\\n\\n    static long MinimumOverlap(OffsetRange a, (long start, long end) seed)\\n    {\\n        if (seed.start >= a.Start && seed.start <= a.End)\\n            return seed.start;\\n        if (seed.start <= a.Start && seed.end >= a.Start)\\n            return a.Start;\\n\\n        return -1;\\n    }\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2023/5.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","code","pre","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}