"use strict";(self.webpackChunkjoel_allan_nz_github_io=self.webpackChunkjoel_allan_nz_github_io||[]).push([[2538],{313:function(e,n,t){t.r(n),t.d(n,{Head:function(){return h},default:function(){return v}});var l=t(8453),r=t(6540);function a(e){const n=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre"},(0,l.RP)(),e.components),{CodeBox:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeBox",!0),r.createElement(r.Fragment,null,r.createElement(n.h2,null,"Part One"),"\n",r.createElement(n.p,null,"Another simple problem to warm us up. We must count all lines in the input where there's a monotonic increase (or decrease) beween values on that line,\nand no consecutive values on the line have a difference greater than 3."),"\n",r.createElement(n.p,null,"I chose to approach it by considering each number but the last - comparing each number\nto the following number, and discovering if we're increasing or decreasing from\nthe first pair of values."),"\n",r.createElement("br"),"\n",r.createElement(n.p,null,"There is a cost to this (we need to check equality between the paired values), but\na cleaner solution doesn't leap to mind. JavaScript's ",r.createElement(n.code,null,"Array.prototype.every()")," and\nC#'s ",r.createElement(n.code,null,"Linq.Enumerable.All()")," both stop evaluating as soon as they resolve a failure."),"\n",r.createElement(t,{names:"typescript|C#"},r.createElement(n.pre,null,r.createElement(n.code,{className:"language-js"},"function partOne(input: string[]): number | string {\n  return input.reduce((sum, current) => {\n    const parsedLine = current.split(/\\s+/).map((y) => parseInt(y))\n    return areLevelsSafe(parsedLine) ? sum + 1 : sum\n  }, 0)\n}\n\nfunction areLevelsSafe(levels: number[]): boolean {\n  let increasing: boolean | null = null\n\n  return levels.slice(0, -1).every((current, index) => {\n    increasing ??= levels[index + 1] > current\n\n    return (\n      increasing == levels[index + 1] > current &&\n      levels[index + 1] != current &&\n      Math.abs(levels[index + 1] - current) < 4\n    )\n  })\n}\n")),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-csharp"},"public override object PartOne()\n{\n    var parsedInput = Input.Select(x => x.Split(' ', StringSplitOptions.RemoveEmptyEntries)\n                                          .Select(x => int.Parse(x))\n                                          .ToList());\n    return parsedInput.Count(line => AreLevelsSafe(line));\n}\n\nprivate static bool AreLevelsSafe(List<int> levels)\n{\n    bool? increasing = null;\n\n    return Enumerable.Range(0, levels.Count - 1).All(index =>\n    {\n        increasing ??= levels[index + 1] > levels[index];\n\n        return increasing == levels[index + 1] > levels[index] &&\n            Math.Abs(levels[index + 1] - levels[index]) < 4 &&\n            levels[index + 1] != levels[index];\n    });\n}\n"))),"\n",r.createElement(n.h2,null,"Part Two"),"\n",r.createElement(n.p,null,"Identical to part one, except if a line fails we must then also check if the line has at most a single 'bad' value. My somewhat lazy approach is to just feed partial lines back into ",r.createElement(n.code,null,"areLevelsSafe()"),", using ",r.createElement(n.code,null,"Array.prototype.find()")," to stop checking sub-lines on a success."),"\n",r.createElement(n.p,null,"Explicitly declaring ",r.createElement(n.code,null,"subLevel")," is strictly unnecessary, but a bit more readable"),"\n",r.createElement(t,{names:"typescript|C#"},r.createElement(n.pre,null,r.createElement(n.code,{className:"language-js"},"export function partTwo(input: string[]): number | string {\n  return input.reduce((sum, current) => {\n    const parsedLine = current.split(/\\s+/).map((y) => parseInt(y))\n    return areLevelsSafeWithDampener(parsedLine) ? sum + 1 : sum\n  }, 0)\n}\n\nfunction areLevelsSafeWithDampener(levels: number[]): boolean {\n  return (\n    areLevelsSafe(levels) ||\n    levels.find((level, index) => {\n      const subLevel = [...levels.slice(0, index), ...levels.slice(index + 1)]\n      return areLevelsSafe(subLevel)\n    }) !== undefined\n  )\n}\n")),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-csharp"},"public override object PartTwo()\n{\n    var parsedInput = Input.Select(x => x.Split(' ', StringSplitOptions.RemoveEmptyEntries)\n                                          .Select(x => int.Parse(x))\n                                          .ToList());\n    return parsedInput.Count(line => AreLevelsSafeWithDampener(line));\n}\n\nprivate static bool AreLevelsSafeWithDampener(List<int> levels)\n{\n    if (AreLevelsSafe(levels))\n        return true;\n\n    return Enumerable.Range(0, levels.Count).Any(index =>\n    {\n        return AreLevelsSafe(levels.Where((x, i) => i != index).ToList());\n    });\n}\n"))))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.RP)(),e.components);return n?r.createElement(n,e,r.createElement(a,e)):a(e)};var i=t(2779),c=t(7206),o=t(791),u=t(4813),p=t(572);const m={CodeBox:i.A};function d(e){let{pageContext:n,children:t}=e;return r.createElement(r.Fragment,null,r.createElement(u.A,null),r.createElement("div",{className:"min-h-screen bg-chicPrimary"},r.createElement(o.A,{props:n.list}),r.createElement("div",{className:"adventofcode max-w-[60%] ml-[20%]"},r.createElement("h1",null,r.createElement("a",{href:"https://adventofcode.com/"+n.year+"/day/"+n.puzz},n.year+" Day "+n.puzz+" - "+n.title)),r.createElement(l.xA,{components:m},t),n.puzz&&n.year?r.createElement(c.A,{year:n.year,puzz:n.puzz}):r.createElement(r.Fragment,null))),r.createElement(p.A,null))}function v(e){return r.createElement(d,e,r.createElement(s,e))}const h=()=>r.createElement(r.Fragment,null,r.createElement("title",null,"Joel-Allan-NZ - Advent of Code"),r.createElement("html",{lang:"en"}),r.createElement("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),r.createElement("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),r.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap",rel:"stylesheet"}))}}]);
//# sourceMappingURL=component---src-components-layout-tsx-content-file-path-days-2024-2-mdx-c06d0e495a65038205b8.js.map