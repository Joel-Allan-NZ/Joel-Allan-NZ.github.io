"use strict";(self.webpackChunkjoel_allan_nz_github_io=self.webpackChunkjoel_allan_nz_github_io||[]).push([[1177],{8294:function(e,t,n){n.r(t),n.d(t,{Head:function(){return g},default:function(){return h}});var a=n(8453),r=n(6540);function l(e){const t=Object.assign({h2:"h2",p:"p",code:"code",pre:"pre"},(0,a.RP)(),e.components),{CodeBox:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeBox",!0),r.createElement(r.Fragment,null,r.createElement(t.h2,null,"Part One"),"\n",r.createElement(t.p,null,"In stark contrast to yesterday's lengthy solution, today is short and sweet with a closed solution."),"\n",r.createElement("br"),"\n",r.createElement(t.p,null,"The problem text lays it out in the example: there are upper and lower bounds of\nhow long you can hold the button and travel the required distance, and all points\nin between those bounds are also valid; we're looking at a parabolic function. To\nfind those intersects, we can use the\n",r.createElement("a",{href:"https://en.wikipedia.org/wiki/Quadratic_formula"},"quadratic formula."),"\nThe upper bound/root is equivalent to ",r.createElement(t.code,null,"time-lower"),", and therefore the entirety of\nvalid durations falls in the range ",r.createElement(t.code,null,"time-2*lower+1"),"."),"\n",r.createElement(n,{names:"typescript|C#"},r.createElement(t.pre,null,r.createElement(t.code,{className:"language-js"},"export function partOne(input: string[]): number | string {\n  const times = input[0].matchAll(/\\d+/g).map((x) => parseInt(x[0]))\n  const distances = input[1]\n    .matchAll(/\\d+/g)\n    .map((x) => parseInt(x[0]))\n    .toArray()\n\n  return times.reduce(\n    (total, time, index) => findQuadraticRange(time, distances[index]) * total,\n    1\n  )\n}\n\nfunction findQuadraticRange(time: number, distance: number) {\n  const lowerBound = Math.floor(\n    0.5 * (time - Math.sqrt(time ** 2 - 4 * distance)) + 1\n  )\n  return time - lowerBound * 2 + 1\n}\n")),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-csharp"},'public override object PartOne()\n{\n    int[] times = GetNumbers().Matches(Input[0]).Select(x => int.Parse(x.Value)).ToArray();\n    int[] distances = GetNumbers().Matches(Input[1]).Select(x => int.Parse(x.Value)).ToArray();\n\n    var solProduct = 1;\n\n    for (int i = 0; i < times.Length; i++)\n    {\n        var time = times[i];\n        var targetDistance = distances[i];\n        var lowerMatch = (int)Math.Floor(0.5 * (time - Math.Sqrt(Math.Pow(time, 2) - 4 * targetDistance)) + 1);\n\n        solProduct *= (time - 2 * lowerMatch + 1);\n    }\n    return solProduct;\n}\n\n[GeneratedRegex(@"\\d+")]\nprivate static partial Regex GetNumbers();\n'))),"\n",r.createElement(t.h2,null,"Part Two"),"\n",r.createElement(t.p,null,"With a closed solution discovered in part one, this one is trivial. I was expecting a problem where the button instead increased acceleration!"),"\n",r.createElement(n,{names:"typescript|C#"},r.createElement(t.pre,null,r.createElement(t.code,{className:"language-ts"},"export function partTwo(input: string[]): number | string {\n  const time = parseInt(\n    input[0]\n      .matchAll(/\\d+/g)\n      .map((x) => x[0])\n      .toArray()\n      .join('')\n  )\n  const distance = parseInt(\n    input[1]\n      .matchAll(/\\d+/g)\n      .map((x) => x[0])\n      .toArray()\n      .join('')\n  )\n\n  return findQuadraticRange(time, distance)\n}\n")),r.createElement(t.pre,null,r.createElement(t.code,{className:"language-csharp"},"public override object PartTwo()\n{\n    int time = int.Parse(GetNumbers().Matches(Input[0]).Select(x => x.Value).Aggregate((x, y) => x + y));\n    long distance = long.Parse(GetNumbers().Matches(Input[1]).Select(x => x.Value).Aggregate((x, y) => x + y));\n\n    var lowerMatch = (int)Math.Floor(0.5 * (time - Math.Sqrt(Math.Pow(time, 2) - 4 * distance)) + 1);\n\n    return (time - 2 * lowerMatch + 1);\n}\n"))))}var o=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.RP)(),e.components);return t?r.createElement(t,e,r.createElement(l,e)):l(e)};var i=n(2779),c=n(7206),s=n(791),m=n(4813),u=n(572);const d={CodeBox:i.A};function p(e){let{pageContext:t,children:n}=e;return r.createElement(r.Fragment,null,r.createElement(m.A,null),r.createElement("div",{className:"min-h-screen bg-chicPrimary"},r.createElement(s.A,{props:t.list}),r.createElement("div",{className:"adventofcode max-w-[60%] ml-[20%]"},r.createElement("h1",null,r.createElement("a",{href:"https://adventofcode.com/"+t.year+"/day/"+t.puzz},t.year+" Day "+t.puzz+" - "+t.title)),r.createElement(a.xA,{components:d},n),t.puzz&&t.year?r.createElement(c.A,{year:t.year,puzz:t.puzz}):r.createElement(r.Fragment,null))),r.createElement(u.A,null))}function h(e){return r.createElement(p,e,r.createElement(o,e))}const g=()=>r.createElement(r.Fragment,null,r.createElement("title",null,"Joel-Allan-NZ - Advent of Code"),r.createElement("html",{lang:"en"}),r.createElement("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),r.createElement("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),r.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap",rel:"stylesheet"}))}}]);
//# sourceMappingURL=component---src-components-layout-tsx-content-file-path-days-2023-6-mdx-dfd3c1114dce25bfec7d.js.map