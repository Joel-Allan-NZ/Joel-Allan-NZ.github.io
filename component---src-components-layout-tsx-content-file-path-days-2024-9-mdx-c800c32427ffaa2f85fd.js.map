{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2024-9-mdx-c800c32427ffaa2f85fd.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2024/9.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Well that's certainly a big single line input.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"With the size of the input in mind, I immediately discarded the idea of using something\\nlike a LinkedList to accurately model the data while maintaining efficient removes/inserts...\\nit was simply going to be too memory heavy.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Instead I model the memory based on the disk map, simply using properties to record\\nwhether it's a file, id, length of the memory block, and the index of that memory.\\nWith those in hand we can generate the checksum by iterating over the disk map, amd\\nchecking what the current point in the diskmap represents\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"If we are looking at a \", React.createElement(_components.strong, null, \"file\"), \", then we simply apply the checksum calculation to\\nthose memory blocks and add them to our running total. I used Gauss' summation here\\nto simply sum the entire contiguous block of memory and cut down on unncessary iteration\\nover each of the individual blocks.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"If, however, we're looking at \", React.createElement(_components.strong, null, \"space\"), \", then we can treat that space as an equal\\nnumber of file memory blocks from the end of the diskmap (\\\"moving\\\" them to the front).\\n\", React.createElement(_components.code, null, \"moveAndCountChunks()\"), \" performs this work, \\\"moving\\\" as many blocks of one file as\\npossible. It calculates what that file (or partial file)'s contribution to the checksum\\nshould be, then updates the remaining size and start index of the space to reflect\\nthe space \\\"used\\\" when \\\"moving\\\" the file memory. It repeats this process until the\\ncurrent block of space has been entirely used, or we've run out of file memory to\\nmove into it.\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"one\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"\\nexport function partOne(input: string[]): number | string {\\n  const spaces = parse(input)\\n  return calculateChecksum(spaces)\\n}\\n\\nInterface Memory {\\n  file: boolean\\n  id: number\\n  length: number\\n  index: number\\n}\\n\\nfunction parse(input: string[]): Memory[] {\\n  const memoryBlocks: Memory[] = []\\n  let file = true\\n  let index = 0\\n  let id = 0\\n  input[0].split('').forEach((c) => {\\n    let length = parseInt(c)\\n    memoryBlocks.push({ file, length, id: file ? id : -1, index })\\n    index += length\\n    id = file ? id + 1 : id\\n    file = !file\\n  })\\n  return memoryBlocks\\n}\\n\\nfunction calculateChecksum(memoryBlocks: Memory[]): number {\\n  let checksum = 0\\n  let lastFileIndex = memoryBlocks.findLastIndex((x) => x.file)\\n\\n  memoryBlocks.forEach((space) => {\\n    if (space.file) {\\n      checksum += gaussSum(space.id, space.length, space.index)\\n      space.file = false\\n    } else {\\n      while (space.length > 0) {\\n        const origin = memoryBlocks[lastFileIndex]\\n        if (!origin.file) return checksum\\n\\n        checksum += moveAndCountChunks(origin, space)\\n\\n        if (origin.length == 0) {\\n          origin.file = false\\n          lastFileIndex -= 2\\n        }\\n      }\\n    }\\n  })\\n  return checksum\\n}\\n\\nfunction moveAndCountChunks(origin: Memory, destination: Memory): number {\\n  const bigger = origin.length > destination.length ? origin : destination\\n  const smaller = origin.length > destination.length ? destination : origin\\n\\n  const checksum = gaussSum(origin.id, smaller.length, destination.index)\\n\\n  destination.index += smaller.length\\n  bigger.length -= smaller.length\\n  smaller.length = 0\\n\\n  return checksum\\n}\\n\\nfunction gaussSum(id: number, length: number, index: number): number {\\n  return Math.floor(id * (length / 2) * (2 * index + length - 1))\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"internal class Memory(bool file, long length, int id, long index)\\n{\\n    internal bool File = file;\\n    internal int Id = id;\\n    internal long Length = length;\\n    internal long Index = index;\\n}\\n\\npublic override object PartOne()\\n{\\n    var blocks = ParseInput();\\n\\n    return CalculateChecksum(blocks);\\n}\\n\\nprivate List<Memory> ParseInput()\\n{\\n    List<Memory> memoryBlocks = [];\\n\\n    bool file = true;\\n    long index = 0;\\n    var id = 0;\\n    foreach (char c in Input[0])\\n    {\\n        var length = int.Parse(c.ToString());\\n        memoryBlocks.Add(new(file, length, file ? id : -1, index));\\n        index += length;\\n        if (file)\\n            id++;\\n        file = !file;\\n    }\\n    return memoryBlocks;\\n}\\n\\nprivate static double CalculateChecksum(List<Memory> memoryBlocks)\\n{\\n    double checksum = 0;\\n    int lastFileIndex = memoryBlocks.FindLastIndex(x => x.File);\\n\\n    foreach (Memory block in memoryBlocks)\\n    {\\n        if (block.File)\\n        {\\n            checksum += GaussSum(block.Id, block.Length, block.Index);\\n            block.File = false;\\n        }\\n        else\\n        {\\n            while (block.Length > 0)\\n            {\\n                Memory origin = memoryBlocks[lastFileIndex];\\n                if (!origin.File)\\n                    return checksum;\\n\\n                checksum += MoveAndCountChunks(origin, block);\\n\\n                if (origin.Length == 0)\\n                {\\n                    origin.File = false;\\n                    lastFileIndex -= 2;\\n                }\\n            }\\n        }\\n    }\\n    return checksum;\\n}\\n\\nprivate static double MoveAndCountChunks(Memory origin, Memory destination)\\n{\\n    Memory bigger, smaller;\\n    if (origin.Length > destination.Length)\\n    {\\n        bigger = origin;\\n        smaller = destination;\\n    }\\n    else\\n    {\\n        bigger = destination;\\n        smaller = origin;\\n    }\\n\\n    var checksum = GaussSum(origin.Id, smaller.Length, destination.Index);\\n\\n    destination.Index += smaller.Length;\\n    bigger.Length -= smaller.Length;\\n    smaller.Length = 0;\\n\\n    return checksum;\\n}\\n\\nprivate static double GaussSum(int id, long length, long index) => Math.Floor(id * (length / 2d) * (index + index + length - 1));\\n\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"Much like my approach to the first part, I chose to model it via the disk map rather than actually \\\"moving\\\" files.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"This is a little simpler than the first part - we iterate through the disk map's\\nmemory in reverse, finding the first space they can wholly fit into (if any), and\\nrecording their (potentially new) checksum value. Finally, we reduce the length of\\nthe space and update its index to finish representing \\\"moving\\\" the file into it.\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"two\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const memoryBlocks = parse(input)\\n  return calculateNoFragChecksum(memoryBlocks)\\n}\\n\\nfunction calculateNoFragChecksum(memoryBlocks: Memory[]): number {\\n  let total = 0\\n  const lastIndex = memoryBlocks.findLastIndex((x) => x.file)\\n\\n  for (let i = lastIndex; i > -1; i -= 2) {\\n    const origin = memoryBlocks[i]\\n    const destination = tryFindDestination(memoryBlocks, i)\\n    if (!destination) total += gaussSum(origin.id, origin.length, origin.index)\\n    else {\\n      total += gaussSum(origin.id, origin.length, destination.index)\\n      destination.length -= origin.length\\n      destination.index += origin.length\\n    }\\n  }\\n  return total\\n}\\n\\nfunction tryFindDestination(\\n  memoryBlocks: Memory[],\\n  toMoveIndex: number\\n): Memory | null {\\n  let firstFit = memoryBlocks.findIndex(\\n    (x) => !x.file && x.length >= memoryBlocks[toMoveIndex].length\\n  )\\n  return firstFit != -1 && firstFit < toMoveIndex\\n    ? memoryBlocks[firstFit]\\n    : null\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    var blocks = ParseInput();\\n\\n    return CalculateNoFragChecksum(blocks);\\n}\\n\\nprivate static double CalculateNoFragChecksum(List<Memory> memoryBlocks)\\n{\\n    double total = 0D;\\n    int last = memoryBlocks.FindLastIndex(x => x.File);\\n\\n    for (int i = last; i > -1; i -= 2)\\n    {\\n        Memory origin = memoryBlocks[i];\\n        if (!TryFindDestination(memoryBlocks, i, out Memory? destination))\\n        {\\n            total += GaussSum(origin.Id, origin.Length, origin.Index);\\n            continue;\\n        }\\n        total += GaussSum(origin.Id, origin.Length, destination!.Index);\\n        destination.Length -= origin.Length;\\n        destination.Index += origin.Length;\\n    }\\n    return total;\\n}\\n\\nprivate static bool TryFindDestination(List<Memory> memoryBlocks, int toMoveIndex, out Memory? destination)\\n{\\n    int firstFit = memoryBlocks.FindIndex(x => !x.File && x.Length >= memoryBlocks[toMoveIndex].Length);\\n    destination = (firstFit != -1 && firstFit < toMoveIndex) ? memoryBlocks[firstFit] : null;\\n\\n    return destination != null;\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2024/9.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","strong","code","pre","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","boxname","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}