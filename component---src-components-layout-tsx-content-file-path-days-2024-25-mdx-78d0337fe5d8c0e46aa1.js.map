{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2024-25-mdx-78d0337fe5d8c0e46aa1.js","mappings":"uOAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,aAAa,QAACC,GAAWT,EAExD,OADKS,GAeP,SAA8BC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAjBgBG,CAAqB,WAAW,GACvCC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,oHAAqH,KAAMU,EAAAA,cAAoBL,EAAS,CAC7SM,QAAS,MACTC,MAAO,iBACNF,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CAClFW,UAAW,eACV,87BAA+7BH,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CACjhCW,UAAW,mBACV,mhCAAohC,KAAMH,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,mDACroC,CAKA,MAJA,SAAoBL,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOW,EAAYL,EAAAA,cAAoBK,EAAWpB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oDCfA,MAAMqB,EAAa,CACjBX,QAAOA,EAAAA,GAET,SAASY,EAAOC,GACd,IAAI,YAACC,EAAW,SAAEC,GAAYF,EAC9B,OAAOR,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBW,EAAAA,EAAQ,MAAOX,EAAAA,cAAoB,MAAO,CAC7GG,UAAW,+BACVH,EAAAA,cAAoBY,EAAAA,EAAe,CACpC3B,MAAOwB,EAAYI,OACjBb,EAAAA,cAAoB,MAAO,CAC7BG,UAAW,qCACVH,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,IAAK,CAC1Dc,KAAM,4BAA8BL,EAAYM,KAAO,QAAUN,EAAYO,MAC5EP,EAAYM,KAAO,QAAUN,EAAYO,KAAO,MAAQP,EAAYQ,QAASjB,EAAAA,cAAoBkB,EAAAA,GAAa,CAC/GxB,WAAYY,GACXI,GAAWD,EAAYO,MAAQP,EAAYM,KAAOf,EAAAA,cAAoBmB,EAAAA,EAAa,CACpFJ,KAAMN,EAAYM,KAClBC,KAAMP,EAAYO,OACfhB,EAAAA,cAAoBA,EAAAA,SAAgB,QAASA,EAAAA,cAAoBoB,EAAAA,EAAQ,MAChF,CACe,SAASC,EAAiBpC,GACvC,OAAOe,EAAAA,cAAoBO,EAAQtB,EAAOe,EAAAA,cAAoBsB,EAAqBrC,GACrF,CACO,MAAMsC,EAAOA,IAAMvB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,QAAS,KAAM,kCAAmCA,EAAAA,cAAoB,OAAQ,CACpKwB,KAAM,OACJxB,EAAAA,cAAoB,OAAQ,CAC9ByB,IAAK,aACLX,KAAM,iCACJd,EAAAA,cAAoB,OAAQ,CAC9ByB,IAAK,aACLX,KAAM,8BACJd,EAAAA,cAAoB,OAAQ,CAC9Bc,KAAM,mKACNW,IAAK,e","sources":["webpack://joel-allan-nz.github.io/./days/2024/25.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Christmas Day! ðŸŽ„ This one's effectively a freebie where you can take any lazy approach and have a quick result.\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"one\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const { keys, locks } = parse(input)\\n\\n  return keys.reduce(\\n    (total, key) => total + locks.filter((lock) => isFit(key, lock, 5)).length,\\n    0\\n  )\\n}\\n\\nfunction parse(input: string[]): { keys: number[][], locks: number[][] } {\\n  const DIAGRAMHEIGHT = 7\\n  const KEYSIZE = 5\\n  const keys: number[][] = []\\n  const locks: number[][] = []\\n\\n  for (let i = 0; i < input.length; i += DIAGRAMHEIGHT + 1) {\\n    const lockOrKey: number[] = Array(5).fill(-1)\\n    for (let j = 0; j < DIAGRAMHEIGHT; j++) {\\n      for (let k = 0; k < KEYSIZE; k++) {\\n        if (input[i + j][k] == '#') lockOrKey[k]++\\n      }\\n    }\\n    if (input[i][0] != '#') keys.push(lockOrKey)\\n    else locks.push(lockOrKey)\\n  }\\n\\n  return { keys, locks }\\n}\\n\\nfunction isFit(key: number[], lock: number[], keySize: number): boolean {\\n  return key.every((value, index) => lock[index] + value <= keySize)\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"const int DIAGRAMHEIGHT = 7;\\nconst int KEYSIZE = 5;\\n\\npublic override object PartOne()\\n{\\n    var (keys, locks) = Parse();\\n\\n    return keys.Sum(key => locks.Count(l => IsFit(key, l)));\\n\\n    static bool IsFit(int[] key, int[] l) => key.Zip(l).All(x => x.First + x.Second <= KEYSIZE);\\n}\\n\\nprivate static bool IsFit(int[] key, int[] l) => key.Zip(l).All(x => x.First + x.Second <= KEYSIZE);\\n\\nprivate (IEnumerable<int[]> keys, IEnumerable<int[]> locks) Parse()\\n{\\n    List<int[]> keys = [];\\n    List<int[]> locks = [];\\n\\n    for (int i = 0; i < Input.Length; i += (DIAGRAMHEIGHT + 1))\\n    {\\n        int[] lockOrKey = [-1, -1, -1, -1, -1];\\n        for (int j = 0; j < DIAGRAMHEIGHT; j++)\\n        {\\n            for (int k = 0; k < KEYSIZE; k++)\\n            {\\n                if (Input[i + j][k] == '#')\\n                    lockOrKey[k]++;\\n            }\\n        }\\n        if (Input[i][0] != '#')\\n            keys.Add(lockOrKey);\\n        else\\n            locks.Add(lockOrKey);\\n    }\\n    return (keys, locks);\\n}\\n\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"The second part of christmas is a free star! :)\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2024/25.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","boxname","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}