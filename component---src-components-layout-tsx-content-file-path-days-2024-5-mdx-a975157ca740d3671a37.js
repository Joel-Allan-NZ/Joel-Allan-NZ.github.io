"use strict";(self.webpackChunkjoel_allan_nz_github_io=self.webpackChunkjoel_allan_nz_github_io||[]).push([[8461],{2754:function(e,n,t){t.r(n),t.d(n,{Head:function(){return h},default:function(){return g}});var r=t(8453),a=t(6540);function l(e){const n=Object.assign({h2:"h2",p:"p",pre:"pre",code:"code"},(0,r.RP)(),e.components),{CodeBox:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("CodeBox",!0),a.createElement(a.Fragment,null,a.createElement(n.h2,null,"Part One"),"\n",a.createElement(n.p,null,"This first part is pretty straightforward: parse the input (in my case, very messily), then test the update collections to filter out the valid ones, and sum the middle values of each (easy, as they all have odd lengths)."),"\n",a.createElement(n.p,null,a.createElement("br"),"I opted to model it as a simple unweighted graph, in a basic Node,Edges\nDictionary/Map. Nothing fancy here."),"\n",a.createElement(t,{names:"typescript|C#"},a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"export function partOne(input: string[]): number | string {\n  const { edges, updates } = parse(input)\n  return updates.reduce(\n    (total, update) =>\n      isValidOrder(edges, update)\n        ? total + update[Math.floor(update.length / 2)]\n        : total,\n    0\n  )\n}\n\nfunction isValidOrder(edges: Map<number, number[]>, update: number[]) {\n  let valid = update.every((item, index) => {\n    return (\n      update.slice(index + 1).find((after) => {\n        return edges.has(after) && edges.get(after)!.includes(item)\n      }) === undefined\n    )\n  })\n  return valid\n}\n\nfunction parse(input: string[]): {\n  edges: Map<number, number[]>\n  updates: number[][]\n} {\n  const edges = new Map<number, number[]>()\n  const updates: number[][] = []\n  let updating = false\n\n  input.forEach((line) => {\n    if (!line || line.length == 0) updating = true\n    else if (updating) {\n      updates.push(line.split(',').map((x) => parseInt(x)))\n    } else if (!updating) {\n      const split = line.split('|').map((x) => parseInt(x))\n      if (!edges.has(split[0])) edges.set(split[0], [split[1]])\n      else if (!edges.get(split[0])!.includes(split[1]))\n        edges.set(split[0], [...edges.get(split[0])!, split[1]])\n    }\n  })\n\n  return { edges, updates }\n}\n")),a.createElement(n.pre,null,a.createElement(n.code,{className:"language-csharp"},"public override object PartOne()\n{\n    var (edges, updates) = Parse();\n    var c = updates.Count(update => IsValidOrder(edges, update));\n    return updates.Sum(update => IsValidOrder(edges, update) ? update[update.Count / 2] : 0);\n}\n\nprivate static bool IsValidOrder(Dictionary<int, HashSet<int>> edges, List<int> order)\n{\n    return Enumerable.Range(0, order.Count).All(index =>\n    {\n        return !order.Skip(index + 1).Any(j =>\n        {\n            return edges.TryGetValue(j, out var result) && result.Contains(order[index]);\n        });\n    });\n}\n\nprivate (Dictionary<int, HashSet<int>>, IEnumerable<List<int>>) Parse()\n{\n    IEnumerable<List<int>> order = [];\n    Dictionary<int, HashSet<int>> edges = [];\n    bool readingUpdates = false;\n\n    foreach (var line in Input)\n    {\n        if (string.IsNullOrEmpty(line))\n        {\n            readingUpdates = true;\n            continue;\n        }\n        if (!readingUpdates)\n        {\n            var rule = line.Split('|').Select(x => int.Parse(x)).ToArray();\n            if (edges.TryGetValue(rule[0], out var xEdges))\n                edges[rule[0]].Add(rule[1]);\n            else\n                edges[rule[0]] = [rule[1]];\n        }\n        else\n        {\n            order = order.Append(line.Split(',').Select(x => int.Parse(x)).ToList());\n        }\n    }\n    return (edges, order);\n}\n"))),"\n",a.createElement(n.h2,null,"Part Two"),"\n",a.createElement(n.p,null,"The first time I got tricked this year! I (wrongly) assumed I could quickly solve the entire graph with a topological sort, but alas the input had a (hamiltonian) cycle. A quick inspection of the input suggested the graph was complete, which allows for an even lazier approach than implementing a tsort: we can just use the default sort algorithm and check only the immediate edges for any given node."),"\n",a.createElement("br"),"\n",a.createElement(n.p,null,"While writing the TS solution I had a small bug in the ",a.createElement(n.code,null,"parse()")," code that didn't\ncause any issues in part one. I started going down the rabbit hole of testing whether\n",a.createElement(n.code,null,"Array.prototype.sort()")," was meaningfully different from C#'s ",a.createElement(n.code,null,"List<T>.Sort(IComparer<T>)"),"\nbefore noticing the simple problem. Hooray for being an idiot!"),"\n",a.createElement(t,{names:"typescript|C#"},a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"export function partTwo(input: string[]): number | string {\n  const { edges, updates } = parse(input)\n  return updates.reduce((total, update) => {\n    if (isValidOrder(edges, update)) return total\n    update.sort((a, b) => {\n      return edges.get(a)!.includes(b) ? -1 : edges.get(b)!.includes(a) ? 1 : 0\n    })\n    return total + update[Math.floor(update.length / 2)]\n  }, 0)\n}\n")),a.createElement(n.pre,null,a.createElement(n.code,{className:"language-csharp"},"public override object PartTwo()\n{\n    var (edges, updates) = Parse();\n    return updates.Sum(update =>\n    {\n        if (IsValidOrder(edges, update))\n            return 0;\n        update.Sort(new NodeComparer(edges));\n        return update[update.Count / 2];\n    });\n}\n\ninternal class NodeComparer(Dictionary<int, HashSet<int>> e) : IComparer<int>\n{\n    private readonly Dictionary<int, HashSet<int>> edges = e;\n    public int Compare(int x, int y)\n    {\n        if (edges[x].Contains(y)) return -1;\n        if (edges[y].Contains(x)) return 1;\n        return 0;\n    }\n}\n"))))}var i=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.RP)(),e.components);return n?a.createElement(n,e,a.createElement(l,e)):l(e)};var s=t(2779),o=t(7206),u=t(791),d=t(4813),p=t(572);const c={CodeBox:s.A};function m(e){let{pageContext:n,children:t}=e;return a.createElement(a.Fragment,null,a.createElement(d.A,null),a.createElement("div",{className:"min-h-screen bg-chicPrimary"},a.createElement(u.A,{props:n.list}),a.createElement("div",{className:"adventofcode max-w-[60%] ml-[20%]"},a.createElement("h1",null,a.createElement("a",{href:"https://adventofcode.com/"+n.year+"/day/"+n.puzz},n.year+" Day "+n.puzz+" - "+n.title)),a.createElement(r.xA,{components:c},t),n.puzz&&n.year?a.createElement(o.A,{year:n.year,puzz:n.puzz}):a.createElement(a.Fragment,null))),a.createElement(p.A,null))}function g(e){return a.createElement(m,e,a.createElement(i,e))}const h=()=>a.createElement(a.Fragment,null,a.createElement("title",null,"Joel-Allan-NZ - Advent of Code"),a.createElement("html",{lang:"en"}),a.createElement("link",{rel:"preconnect",href:"https://fonts.googleapis.com"}),a.createElement("link",{rel:"preconnect",href:"https://fonts.gstatic.com"}),a.createElement("link",{href:"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap",rel:"stylesheet"}))}}]);
//# sourceMappingURL=component---src-components-layout-tsx-content-file-path-days-2024-5-mdx-a975157ca740d3671a37.js.map