{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2024-3-mdx-48d7582d2eb1714f9dc3.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2024/3.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    em: \"em\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"Our first \\\"just use regular expressions\\\" problem of the year.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Nothing special here, just grabbing the number values that we need and performing\\nsome basic math.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const singleLineInput = input.reduce((total, current) => total + current, '')\\n  const matches = [...singleLineInput.matchAll(/mul\\\\((\\\\d+),(\\\\d+)\\\\)/g).toArray()]\\n\\n  return matches.reduce(\\n    (total, match) => total + parseInt(match[1]) * parseInt(match[2]),\\n    0\\n  )\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    return Input.Sum(line =>\\n    {\\n        var matches = Day3.MulRegex().Matches(line);\\n        return SumMatches(matches);\\n    });\\n}\\nprivate static int SumMatches(IEnumerable<Match> matches)\\n{\\n    return matches.Sum(match => match.Value[4..^1].Split(',')\\n                                                  .Select(x => int.Parse(x))\\n                                                  .Aggregate((x, y) => x * y));\\n}\\n\\n[GeneratedRegex(@\\\"mul\\\\(\\\\d+,\\\\d+\\\\)\\\")]\\ninternal static partial Regex MulRegex();\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"I extended our RegExp to added capturing groups to also grab \", React.createElement(_components.em, null, \"do()\"), \" and \", React.createElement(_components.em, null, \"don't()\"), \" matches. This allows us to toggle a boolean and use a simple loop to only count \", React.createElement(_components.em, null, \"mul()\"), \" matches while we're not immediately behind a \", React.createElement(_components.em, null, \"don't()\"), \".\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"As a certified regex hater my original solution instead grabbed the \", React.createElement(_components.em, null, \"do()\"), \" and \", React.createElement(_components.em, null, \"don't()\"), \" matches separately and used them to construct a simple set of ranges we could check \", React.createElement(_components.em, null, \"mul()\"), \" indexes against... but it was considerably more work than using \", React.createElement(_components.strong, null, \"slightly\"), \" more regex, which seems like a good trade off.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const singleLineInput = input.reduce((total, current) => total + current, '')\\n  const matches = [\\n    ...singleLineInput.matchAll(/mul\\\\((\\\\d+),(\\\\d+)\\\\)|(don\\\\'t\\\\(\\\\))|(do\\\\(\\\\))/g),\\n  ]\\n  let dont = false\\n  let total = 0\\n  matches.forEach((match) => {\\n    if (match[0].startsWith('don')) dont = true\\n    else if (match[0].startsWith('do')) dont = false\\n    else if (!dont) total += parseInt(match[1]) * parseInt(match[2])\\n  })\\n  return total\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    string SingleLineInput = Input.Aggregate((x, y) => x + y);\\n    bool dont = false;\\n    MatchCollection matches = PartTwoRegex().Matches(SingleLineInput);\\n    return matches.Sum(match =>\\n    {\\n        if (match.Value.StartsWith(\\\"don\\\"))\\n            dont = true;\\n        else if (match.Value.StartsWith(\\\"do\\\"))\\n            dont = false;\\n        else if (!dont)\\n        {\\n            return match.Value[4..^1].Split(',')\\n                                      .Select(x => int.Parse(x))\\n                                      .Aggregate((x, y) => x * y);\\n        }\\n        return 0;\\n\\n    });\\n}\\n\\n[GeneratedRegex(@\\\"mul\\\\(\\\\d+,\\\\d+\\\\)|(do\\\\(\\\\))|(don't\\\\(\\\\))\\\")]\\ninternal static partial Regex PartTwoRegex();\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2024/3.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","em","strong","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}