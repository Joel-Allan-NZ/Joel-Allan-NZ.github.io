{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2023-24-mdx-9c9eaa866d0fc6f47b58.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2023/24.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"This is all about \", React.createElement(_components.a, {\n    href: \"https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection\"\n  }, \"line-line intersection\"), \". The specific apoproach I'm using is to find the time distance between the current point and the intercept, and using that to find said intercept point. It should be trivial to roll the past-checking aspect of whether an intercept is valid into this method, but I've separated them here in the interest of legibility.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"There ought to be a number of different valid mathematical approaches here, but this\\none was sufficiently fast to be fit for purpose. I'm more worried about what Part\\n2 will entail than refining this further.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const hail = parse(input)\\n  const MIN = 200000000000000\\n  const MAX = 400000000000000\\n\\n  let count = 0\\n  for (let i = 0; i < hail.length; i++) {\\n    for (let j = i + 1; j < hail.length; j++) {\\n      const inter = intercept(hail[i], hail[j])\\n      if (isValidIntercept(hail[i], hail[j], inter, MIN, MAX)) {\\n        count++\\n      }\\n    }\\n  }\\n  return count\\n}\\n\\nfunction parse(input: string[]): number[][][] {\\n  const hail: number[][][] = []\\n  input.forEach((line) => {\\n    const split = line.split('@')\\n    hail.push(split.map((x) => x.split(', ').map((x) => parseInt(x))))\\n  })\\n  return hail\\n}\\n\\nfunction intercept(a: number[][], b: number[][]): number[] {\\n  if (a[1][1] * b[1][0] - a[0][0] * b[1][1] == 0) return [-1, -1]\\n\\n  const numerator =\\n    a[0][0] * b[1][1] -\\n    a[0][1] * b[1][0] -\\n    b[0][0] * b[1][1] +\\n    b[0][1] * b[1][0]\\n  const denominator = a[1][1] * b[1][0] - a[1][0] * b[1][1]\\n\\n  const lambda = numerator / denominator\\n\\n  return [a[0][0] + lambda * a[1][0], a[0][1] + lambda * a[1][1]]\\n}\\n\\nfunction isValidIntercept(\\n  a: number[][],\\n  b: number[][],\\n  intercept: number[],\\n  min: number,\\n  max: number\\n): boolean {\\n  if (\\n    intercept.some(\\n      (i, index) =>\\n        (i < a[0][index] && a[1][index] > 0) ||\\n        (i < b[0][index] && b[1][index] > 0)\\n    )\\n  )\\n    return false\\n  if (\\n    intercept.some(\\n      (i, index) =>\\n        (i > a[0][index] && a[1][index] < 0) ||\\n        (i > b[0][index] && b[1][index] < 0)\\n    )\\n  )\\n    return false\\n\\n  return intercept.every((i) => i >= min && i <= max)\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    var hail = Parse(Input);\\n    long MIN = 200000000000000;\\n    long MAX = 400000000000000;\\n\\n    return hail.UniquePairs().Count(pair =>\\n    {\\n        var inter = Intercept(pair[0], pair[1]);\\n        return !IsInterceptInPast(pair, inter) && inter[0] >= MIN && inter[0] <= MAX && inter[1] >= MIN && inter[1] <= MAX;\\n    });\\n}\\n\\nprivate static bool IsInterceptInPast(Hail[] pair, decimal[] inter)\\n{\\n    if (inter[0] < pair[0].Position[0] && pair[0].Velocity[0] > 0 || inter[0] < pair[1].Position[0] && pair[1].Velocity[0] > 0)\\n        return true;\\n    if (inter[1] < pair[0].Position[1] && pair[0].Velocity[1] > 0 || inter[1] < pair[1].Position[1] && pair[1].Velocity[1] > 0)\\n        return true;\\n    if (inter[0] > pair[0].Position[0] && pair[0].Velocity[0] < 0 || inter[0] > pair[1].Position[0] && pair[1].Velocity[0] < 0)\\n        return true;\\n    if (inter[1] > pair[0].Position[1] && pair[0].Velocity[1] < 0 || inter[1] > pair[1].Position[1] && pair[1].Velocity[1] < 0)\\n        return true;\\n    return false;\\n}\\n\\nprivate static decimal[] Intercept(Hail a, Hail b)\\n{\\n    if (a.Velocity[1] * b.Velocity[0] - a.Velocity[0] * b.Velocity[1] == 0)\\n        return [-1, -1];\\n\\n    var numerator = (a.Position[0] * b.Velocity[1] - a.Position[1] * b.Velocity[0] - b.Position[0] * b.Velocity[1] + b.Position[1] * b.Velocity[0]);\\n    var denominator = (a.Velocity[1] * b.Velocity[0] - a.Velocity[0] * b.Velocity[1]);\\n    var lambda = numerator / denominator;\\n\\n    return [a.Position[0] + lambda * a.Velocity[0], a.Position[1] + lambda * a.Velocity[1]];\\n}\\n\\ninternal class Hail(decimal[] position, decimal[] velocity)\\n{\\n    internal decimal[] Position = position;\\n    internal decimal[] Velocity = velocity;\\n}\\n\\nprivate static List<Hail> Parse(string[] input)\\n{\\n    List<Hail> hail = [];\\n    foreach (var line in input)\\n    {\\n        var split = line.Split(\\\"@\\\");\\n        hail.Add(new(split[0].Split([',', ' '], StringSplitOptions.RemoveEmptyEntries).Select(x => decimal.Parse(x)).ToArray(),\\n                    split[1].Split([',', ' '], StringSplitOptions.RemoveEmptyEntries).Select(x => decimal.Parse(x)).ToArray()));\\n    }\\n    return hail;\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"Argh, now this one was a toughie. The hardest puzzle in years (for me, at least).\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"The more obvious approach involves linear algebra and finding a possible intersect\\npath for any 3 stones. Implementing a solution that way however, proved difficult\\nto debug; hunting possible algebraic errors as well as programming ones while also\\nkeeping the very large input values meaningful and precise was a headache. After\\nmore debugging time than I'd like to admit I resorted to the wisdom of crowds, and\\nwas gifted with this very tidy solution.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"The idea is that there are a (limited) number of hailstones with identical velocities\\nin a dimension. Those identical velocities guarantee that their relative distance\\nwill always be the same at it was at the beginning, and greatly limits the possible\\nvelocities our thrown stone could have. Testing all pairs of same-velocity stones\\nwith a reasonable range of possible velocities quite quickly reduces down to only\\na single possible velocity vector, from which we can calculate our starting position.\", ' '), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const hail = parse(input)\\n  const velocityVector = findIntersectVelocity(hail)\\n\\n  const a = hail[0]\\n  const ab = [a, hail[1]]\\n\\n  const m = ab.map(\\n    (x) => (x[1][1] - velocityVector[1]) / (x[1][0] - velocityVector[0])\\n  )\\n  const c = ab.map((x, index) => x[0][1] - m[index] * x[0][0])\\n\\n  const x = Math.floor((c[1] - c[0]) / (m[0] - m[1]))\\n  const y = Math.floor(m[0] * x + c[0])\\n  const z =\\n    a[0][2] +\\n    ((a[1][2] - velocityVector[2]) * (x - a[0][0])) /\\n      (a[1][0] - velocityVector[0])\\n\\n  return x + y + z\\n}\\n\\nfunction findIntersectVelocity(hail: number[][][]): number[] {\\n  const sets = [new Set<number>(), new Set<number>(), new Set<number>()]\\n\\n  for (let i = 0; i < hail.length; i++) {\\n    for (let j = i + 1; j < hail.length; j++) {\\n      for (let k = 0; k < 3; k++) {\\n        const res = findPotentialIntersectVelocity(hail[i], hail[j], k, 2000)\\n        if (res.size > 0) {\\n          sets[k] = sets[k].size > 0 ? sets[k].intersection(res) : res\\n        }\\n      }\\n    }\\n  }\\n  return sets.map((x) => x.values().toArray()[0])\\n}\\n\\nfunction findPotentialIntersectVelocity(\\n  a: number[][],\\n  b: number[][],\\n  vectorDimension: number,\\n  speedRange: number\\n): Set<number> {\\n  const potential = new Set<number>()\\n  if (a[1][vectorDimension] == b[1][vectorDimension]) {\\n    const diff = b[0][vectorDimension] - a[0][vectorDimension]\\n    for (let v = -1 * speedRange; v <= speedRange; v++) {\\n      const c = v - a[1][vectorDimension]\\n      if (c != 0 && diff != 0 && ((diff % c) + c) % c == 0) potential.add(v)\\n    }\\n  }\\n  return potential\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    var hail = Parse(Input);\\n    var velocityVector = FindIntersectVelocity(hail);\\n\\n    var a = hail[0];\\n    Hail[] ab = [a, hail[1]];\\n\\n    var m = ab.Select(x => (x.Velocity[1] - velocityVector[1]) / (x.Velocity[0] - velocityVector[0])).ToArray();\\n    var c = ab.Select((x, index) => x.Position[1] - (m[index] * x.Position[0])).ToArray();\\n\\n    var x = Math.Floor((c[1] - c[0]) / (m[0] - m[1]));\\n    var y = Math.Floor(m[0] * x + c[0]);\\n    var z = a.Position[2] + (a.Velocity[2] - velocityVector[2]) * (x - a.Position[0]) / (a.Velocity[0] - velocityVector[0]);\\n\\n    return x + y + z;\\n}\\n\\nprivate static int[] FindIntersectVelocity(List<Hail> hail)\\n{\\n    HashSet<int>?[] sets = [null, null, null];\\n\\n    foreach (var pair in hail.UniquePairs())\\n    {\\n        for (int i = 0; i < 3; i++)\\n        {\\n            var res = FindPotentialIntersectVelocity(pair[0], pair[1], i, 2000);\\n            if (res.Count > 0)\\n                (sets[i] ??= res).IntersectWith(res);\\n        }\\n    }\\n\\n    return sets!.Select(x => x!.First()).ToArray();\\n}\\n\\nprivate static HashSet<int> FindPotentialIntersectVelocity(Hail a, Hail b, int vectorDimension, int speedRange)\\n{\\n    HashSet<int> potentialIntersectVelocities = [];\\n    if (a.Velocity[vectorDimension] == b.Velocity[vectorDimension])\\n    {\\n        var diff = b.Position[vectorDimension] - a.Position[vectorDimension];\\n        for (int v = -1 * speedRange; v <= speedRange; v++)\\n        {\\n            var c = v - a.Velocity[vectorDimension];\\n\\n            if (c != 0 && diff != 0 && (((diff % c) + c) % c) == 0)\\n                potentialIntersectVelocities.Add(v);\\n        }\\n    }\\n    return potentialIntersectVelocities;\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2023/24.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","a","pre","code","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","href","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}