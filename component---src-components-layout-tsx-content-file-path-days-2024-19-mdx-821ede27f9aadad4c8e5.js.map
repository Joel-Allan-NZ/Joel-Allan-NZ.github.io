{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2024-19-mdx-821ede27f9aadad4c8e5.js","mappings":"uOAGA,SAASA,EAAkBC,GACzB,MAAMC,EAAcC,OAAOC,OAAO,CAChCC,GAAI,KACJC,EAAG,IACHC,IAAK,MACLC,KAAM,SACLC,EAAAA,EAAAA,MAAsBR,EAAMS,aAAa,QAACC,GAAWT,EAExD,OADKS,GAsBP,SAA8BC,EAAIC,GAChC,MAAM,IAAIC,MAAM,aAAeD,EAAY,YAAc,UAAY,KAAOD,EAAK,qEACnF,CAxBgBG,CAAqB,WAAW,GACvCC,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,kIAAmI,KAAMU,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,uTAAwT,KAAMU,EAAAA,cAAoB,MAAO,KAAMA,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,+JAAgK,KAAMU,EAAAA,cAAoBL,EAAS,CACn7BM,QAAS,MACTC,MAAO,iBACNF,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CAClFW,UAAW,eACV,osBAAqsBH,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CACvxBW,UAAW,mBACV,qzBAAszB,KAAMH,EAAAA,cAAoBd,EAAYG,GAAI,KAAM,YAAa,KAAMW,EAAAA,cAAoBd,EAAYI,EAAG,KAAM,8IAA+I,KAAMU,EAAAA,cAAoBd,EAAYI,EAAG,KAAMU,EAAAA,cAAoB,MAAO,yfAA0f,KAAMA,EAAAA,cAAoBL,EAAS,CACzpDM,QAAS,MACTC,MAAO,iBACNF,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CAClFW,UAAW,eACV,kzBAAmzBH,EAAAA,cAAoBd,EAAYK,IAAK,KAAMS,EAAAA,cAAoBd,EAAYM,KAAM,CACr4BW,UAAW,mBACV,g0BACL,CAKA,MAJA,SAAoBlB,QAAK,IAALA,IAAAA,EAAQ,CAAC,GAC3B,MAAOmB,QAASC,GAAalB,OAAOC,OAAO,CAAC,GAAGK,EAAAA,EAAAA,MAAsBR,EAAMS,YAC3E,OAAOW,EAAYL,EAAAA,cAAoBK,EAAWpB,EAAOe,EAAAA,cAAoBhB,EAAmBC,IAAUD,EAAkBC,EAC9H,E,oDCtBA,MAAMqB,EAAa,CACjBX,QAAOA,EAAAA,GAET,SAASY,EAAOC,GACd,IAAI,YAACC,EAAW,SAAEC,GAAYF,EAC9B,OAAOR,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoBW,EAAAA,EAAQ,MAAOX,EAAAA,cAAoB,MAAO,CAC7GG,UAAW,+BACVH,EAAAA,cAAoBY,EAAAA,EAAe,CACpC3B,MAAOwB,EAAYI,OACjBb,EAAAA,cAAoB,MAAO,CAC7BG,UAAW,qCACVH,EAAAA,cAAoB,KAAM,KAAMA,EAAAA,cAAoB,IAAK,CAC1Dc,KAAM,4BAA8BL,EAAYM,KAAO,QAAUN,EAAYO,MAC5EP,EAAYM,KAAO,QAAUN,EAAYO,KAAO,MAAQP,EAAYQ,QAASjB,EAAAA,cAAoBkB,EAAAA,GAAa,CAC/GxB,WAAYY,GACXI,GAAWD,EAAYO,MAAQP,EAAYM,KAAOf,EAAAA,cAAoBmB,EAAAA,EAAa,CACpFJ,KAAMN,EAAYM,KAClBC,KAAMP,EAAYO,OACfhB,EAAAA,cAAoBA,EAAAA,SAAgB,QAASA,EAAAA,cAAoBoB,EAAAA,EAAQ,MAChF,CACe,SAASC,EAAiBpC,GACvC,OAAOe,EAAAA,cAAoBO,EAAQtB,EAAOe,EAAAA,cAAoBsB,EAAqBrC,GACrF,CACO,MAAMsC,EAAOA,IAAMvB,EAAAA,cAAoBA,EAAAA,SAAgB,KAAMA,EAAAA,cAAoB,QAAS,KAAM,kCAAmCA,EAAAA,cAAoB,OAAQ,CACpKwB,KAAM,OACJxB,EAAAA,cAAoB,OAAQ,CAC9ByB,IAAK,aACLX,KAAM,iCACJd,EAAAA,cAAoB,OAAQ,CAC9ByB,IAAK,aACLX,KAAM,8BACJd,EAAAA,cAAoB,OAAQ,CAC9Bc,KAAM,mKACNW,IAAK,e","sources":["webpack://joel-allan-nz.github.io/./days/2024/19.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"I'm saying this a frightening number of times (hinting at horrors to come?), but this was nice and straight forward yet again.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"For each pattern consider each towel it could start with, and then take the sub-pattern\\nbeginning after that towel. Repeat the process for each of those sub-patterns until\\nyou have no more sub-pattern left to check (a full match!), or nothing matches with\\nthe remaining sub-patterns (an invalid pattern).\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"This should be pretty simple to do recursively, but I opted to use a stack and avoid\\nany possible recursive depth problems (not that there should be any).\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"one\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const towels = input[0].split(/, /)\\n  const patterns = input.slice(2)\\n\\n  return patterns.reduce(\\n    (total, pattern) => (canMakePattern(pattern, towels) ? total + 1 : total),\\n    0\\n  )\\n}\\n\\nfunction canMakePattern(pattern: string, towels: string[]): boolean {\\n  const patterns = []\\n  patterns.push(pattern)\\n  while (patterns.length > 0) {\\n    let currentPattern = patterns.pop()\\n\\n    for (let towel of towels) {\\n      if (currentPattern?.startsWith(towel)) {\\n        if (currentPattern.length == towel.length) return true\\n\\n        patterns.push(currentPattern.slice(towel.length))\\n      }\\n    }\\n  }\\n  return false\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    var towels = Input[0].Split([',', ' '], StringSplitOptions.RemoveEmptyEntries);\\n    var patterns = Input.Skip(2).ToList();\\n\\n    return patterns.Sum(pattern => CanMakePattern(pattern, towels) ? 1 : 0);\\n}\\n\\nprivate static bool CanMakePattern(string pattern, IEnumerable<string> towels)\\n{\\n    Stack<string> patterns = [];\\n    patterns.Push(pattern);\\n    while (patterns.Count > 0)\\n    {\\n        var currentPattern = patterns.Pop();\\n\\n        foreach (var towel in towels)\\n        {\\n            if (currentPattern.StartsWith(towel))\\n            {\\n                if (currentPattern.Length == towel.Length)\\n                    return true;\\n\\n                patterns.Push(currentPattern[towel.Length..]);\\n            }\\n        }\\n    }\\n    return false;\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"Quite straight forward again, but the predictably large solution means we can't be horribly inefficient. Some memoization goes a long way.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(\"br\"), \"I surrendered to the evils of recursion for this one, but otherwise my\\napproach is very similar to part one: check which towels are a valid beginning\\nfor the pattern, and for each of them then consider the remaining part of the\\npattern again checking for matching towels at the beginning. The only real\\ndifference is that I record the number of towel arrangements that exist for each\\nof these patterns, and use it to avoid duplicate work. Without that memoization\\nthis would not be quick at all!\"), \"\\n\", React.createElement(CodeBox, {\n    boxname: \"two\",\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const towels = input[0].split(/, /)\\n  const patterns = input.slice(2)\\n  const cache = new Map<string, number>()\\n\\n  return patterns.reduce(\\n    (total, pattern) => total + countValidPatterns(cache, pattern, towels),\\n    0\\n  )\\n}\\n\\nfunction countValidPatterns(\\n  cache: Map<string, number>,\\n  pattern: string,\\n  towels: string[]\\n): number {\\n  if (!pattern || pattern.length == 0) return 1\\n  if (cache.has(pattern)) return cache.get(pattern)!\\n\\n  const prefixMatches = towels.filter((towel) => pattern.startsWith(towel))\\n  const matchCount = prefixMatches.reduce(\\n    (total, towel) =>\\n      total + countValidPatterns(cache, pattern.slice(towel.length), towels),\\n    0\\n  )\\n  cache.set(pattern, matchCount)\\n  return matchCount\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    Dictionary<string, long> uniqueFound = [];\\n    var towels = Input[0].Split([',', ' '], StringSplitOptions.RemoveEmptyEntries).ToList();\\n    var patterns = Input.Skip(2).ToList();\\n\\n    return patterns.Sum(x => CountValidPatterns(uniqueFound, x, towels));\\n}\\n\\nprivate static long CountValidPatterns(Dictionary<string, long> cache, string pattern, IEnumerable<string> towels)\\n{\\n    if (String.IsNullOrEmpty(pattern))\\n        return 1;\\n    if (cache.TryGetValue(pattern, out var possibleCount))\\n        return possibleCount;\\n\\n    var towelPrefixMatches = towels.Where(towel => pattern.StartsWith(towel));\\n    long matches = towelPrefixMatches.Sum(towel => CountValidPatterns(cache, pattern[towel.Length..], towels));\\n\\n    cache[pattern] = matches;\\n    return matches;\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2024/19.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","pre","code","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","boxname","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}