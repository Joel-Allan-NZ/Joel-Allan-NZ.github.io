{"version":3,"file":"component---src-components-layout-tsx-content-file-path-days-2023-12-mdx-f6974be5fd7f0a0a9eee.js","mappings":"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","sources":["webpack://joel-allan-nz.github.io/./days/2023/12.mdx","webpack://joel-allan-nz.github.io/./src/components/Layout.tsx"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {CodeBox} = _components;\n  if (!CodeBox) _missingMdxReference(\"CodeBox\", true);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h2, null, \"Part One\"), \"\\n\", React.createElement(_components.p, null, \"This one's a bit trickier than the average!\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"I opted to approach it as a dynamic programming problem, memoizing the results of\\neach problem and subproblem to minimize redundancy.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"The actual function isn't complicated, but it is a little intimidating looking. There\\nare several base cases:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"If we've already found the result of an identical problem/sub-problem, then return it.\"), \"\\n\", React.createElement(_components.li, null, \"If there are no remaining groups (or lengths) of springs left, then it's either a valid solution (no remaining \", React.createElement(_components.code, null, \"#\"), \"), or not.\"), \"\\n\", React.createElement(_components.li, null, \"If the lengths of remaining groups/lengths + the required spaces between them are larger than the space remaining, then it's an invalid solution.\"), \"\\n\", React.createElement(_components.li, null, \"If the the remaining space is equal to the size of the last spring group, but the space contains a \", React.createElement(_components.code, null, \".\"), \", the solution is invalid. If it doesn't contain a \", React.createElement(_components.code, null, \".\"), \", then there's exactly one solution for this subproblem.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"With those cases covered, we can take the current space and break it down into subproblems to solve.\\nThe first possible sub-problem is the same spring space minus the first character (provided it isn't a \", React.createElement(_components.code, null, \"#\"), \" and therefore meaningful). The second is to consider the spring space less the length of the first group of broken springs. IE if you have \", React.createElement(_components.code, null, \"??????\"), \" and \", React.createElement(_components.code, null, \"3\"), \", you can consider it to be \", React.createElement(_components.code, null, \"###???\"), \" and start examing \", React.createElement(_components.code, null, \"???\"), \" with the next group size.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"Once you work your way through that, you have a solution!\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-js\"\n  }, \"export function partOne(input: string[]): number | string {\\n  const cache = new Map<string, number>()\\n  let result = input.reduce((total, line) => {\\n    var split = line.split(/ /)\\n    split[0] = split[0].split(/\\\\.+/).join('.')\\n    return (\\n      total +\\n      findValidArrangements(\\n        cache,\\n        split[0],\\n        split[1].split(/,/).map((x) => parseInt(x))\\n      )\\n    )\\n  }, 0)\\n  return result\\n}\\n\\nfunction findValidArrangements(\\n  cache: Map<string, number>,\\n  springs: string,\\n  lengths: number[]\\n): number {\\n  const line = springs + ' ' + lengths.join(',')\\n\\n  let result = cache.get(line)\\n  if (result) return result\\n\\n  if (lengths.length == 0) return springs.includes('#') ? 0 : 1\\n  if (springs.length - lengths.reduce((a, b) => a + b) - lengths.length < -1)\\n    return 0\\n\\n  const lengthFits = !springs.slice(0, lengths[0]).includes('.')\\n  if (springs.length == lengths[0]) return lengthFits ? 1 : 0\\n\\n  return (cache[line] ??=\\n    (springs[0] != '#'\\n      ? findValidArrangements(cache, trimWorking(springs, 1), lengths)\\n      : 0) +\\n    (lengthFits && springs[lengths[0]] != '#'\\n      ? findValidArrangements(\\n          cache,\\n          trimWorking(springs, lengths[0] + 1),\\n          lengths.slice(1)\\n        )\\n      : 0))\\n}\\n\\nfunction trimWorking(untrimmed: string, start: number) {\\n  if (start >= untrimmed.length) return ''\\n\\n  return untrimmed[start] == '.'\\n    ? untrimmed.slice(start + 1)\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartOne()\\n{\\n    Dictionary<string, long> cache = [];\\n    return Parse().Sum(line => FindValidArrangements(cache, line.spring.Split('.').Aggregate((x, y) => x + '.' + y), line.lengthString, line.lengths));\\n}\\n\\nprivate IEnumerable<(string spring, string lengthString, int[] lengths)> Parse()\\n{\\n    foreach (var line in Input)\\n    {\\n        var split = line.Split(' ');\\n        yield return (split[0], split[1], split[1].Split(',').Select(x => int.Parse(x)).ToArray());\\n    }\\n}\\n\\nprivate IEnumerable<(string spring, string lengthString, int[] lengths)> ParseUnfolded()\\n{\\n    foreach (var line in Input)\\n    {\\n        var split = line.Split(' ');\\n        List<string> fiveSplit0 = [split[0], split[0], split[0], split[0], split[0]];\\n        split[0] = fiveSplit0.Aggregate((x, y) => x + \\\"?\\\" + y);\\n        List<string> fiveSplit1 = [split[1], split[1], split[1], split[1], split[1]];\\n        split[1] = fiveSplit1.Aggregate((x, y) => x + ',' + y);\\n\\n        yield return (split[0], split[1], split[1].Split(',').Select(x => int.Parse(x)).ToArray());\\n    }\\n}\\n\\nprivate static long FindValidArrangements(Dictionary<string, long> cache, string springs, string lengthString, int[] lengths)\\n{\\n    if (cache.TryGetValue(springs + lengthString, out var cached))\\n        return cached;\\n\\n    if (lengths.Length == 0)\\n        return springs.Contains('#') ? 0 : 1;\\n\\n    if (springs.Length - lengths.Sum() - lengths.Length < -1)\\n        return 0;\\n\\n    bool lengthFits = !springs[0..lengths[0]].Contains('.');\\n\\n    if (springs.Length == lengths[0])\\n        return lengthFits ? 1 : 0;\\n\\n    var afterLengthString = lengthString.Length < 3 ? \\\"\\\" : lengths[0] < 10 ? lengthString[2..] : lengthString[3..];\\n    var result = 0L;\\n\\n    if (springs[0] != '#')\\n        result += FindValidArrangements(cache, TrimWorking(springs, 1), lengthString, lengths);\\n\\n    if (lengthFits && springs[lengths[0]] != '#')\\n        result += FindValidArrangements(cache, TrimWorking(springs, lengths[0] + 1), afterLengthString, lengths[1..]);\\n\\n    cache[springs + lengthString] = result;\\n    return result;\\n}\\n\\nprivate static string TrimWorking(string untrimmed, int start)\\n{\\n    if (start >= untrimmed.Length)\\n        return \\\"\\\";\\n\\n    return untrimmed[start] == '.' ? untrimmed[(start + 1)..] : untrimmed[start..];\\n}\\n\"))), \"\\n\", React.createElement(_components.h2, null, \"Part Two\"), \"\\n\", React.createElement(_components.p, null, \"The same problem, but on a bigger scale. The repetition of elements makes the memoization even more important, significantly reducing the amount of recursion required.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"I typically make sure to use \", React.createElement(_components.code, null, \"Map<Tkey,TValue>.set()\"), \" for type-safety, but I cheat a little in this typescript solution in order to use a null coalescing assignment \", React.createElement(_components.code, null, \"??=\"), \". The performance gains in this particular example were staggering (but difficult to explain). There's something tricky going on under the hood with how the assignment is made, but it's a problem for another day.\"), \"\\n\", React.createElement(CodeBox, {\n    names: \"typescript|C#\"\n  }, React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-ts\"\n  }, \"export function partTwo(input: string[]): number | string {\\n  const cache = new Map<string, number>()\\n\\n  let result = 0\\n  for (const line of input) {\\n    const [row, groups] = line\\n      .split(' ')\\n      .map((x, i) =>\\n        i == 1 ? x.split(',').map((y) => parseInt(y)) : x.split(/\\\\.+/).join('.')\\n      )\\n    result += findValidArrangements(\\n      cache,\\n      Array(5).fill(row).join('?'),\\n      Array(5).fill(groups).flat()\\n    )\\n  }\\n  return result\\n}\\n\")), React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-csharp\"\n  }, \"public override object PartTwo()\\n{\\n    Dictionary<string, long> cache = [];\\n    return ParseUnfolded().Sum(line => FindValidArrangements(cache, line.spring.Split('.').Aggregate((x, y) => x + '.' + y), line.lengthString, line.lengths));\\n}\\n\"))));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","import GATSBY_COMPILED_MDX from \"/home/joel/personal/advent-of-code/joel-allan-nz.github.io/days/2023/12.mdx\";\nimport React from 'react';\nimport {MDXProvider} from '@mdx-js/react';\nimport CodeBox from './CodeBox';\nimport TryYourself from './TryYourself';\nimport AdventSideNav from './AdventSideNav';\nimport Header from './Header';\nimport Footer from './Footer';\nconst shortcodes = {\n  CodeBox\n};\nfunction Layout(_ref) {\n  let {pageContext, children} = _ref;\n  return React.createElement(React.Fragment, null, React.createElement(Header, null), React.createElement(\"div\", {\n    className: \"min-h-screen bg-chicPrimary\"\n  }, React.createElement(AdventSideNav, {\n    props: pageContext.list\n  }), React.createElement(\"div\", {\n    className: \"adventofcode max-w-[60%] ml-[20%]\"\n  }, React.createElement(\"h1\", null, React.createElement(\"a\", {\n    href: \"https://adventofcode.com/\" + pageContext.year + \"/day/\" + pageContext.puzz\n  }, pageContext.year + \" Day \" + pageContext.puzz + \" - \" + pageContext.title)), React.createElement(MDXProvider, {\n    components: shortcodes\n  }, children), pageContext.puzz && pageContext.year ? React.createElement(TryYourself, {\n    year: pageContext.year,\n    puzz: pageContext.puzz\n  }) : React.createElement(React.Fragment, null))), React.createElement(Footer, null));\n}\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(Layout, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const Head = () => React.createElement(React.Fragment, null, React.createElement(\"title\", null, \"Joel-Allan-NZ - Advent of Code\"), React.createElement(\"html\", {\n  lang: \"en\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.googleapis.com\"\n}), React.createElement(\"link\", {\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\"\n}), React.createElement(\"link\", {\n  href: \"https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&family=Roboto+Serif:ital,opsz,wght@0,8..144,100..900;1,8..144,100..900&family=VT323&display=swap\",\n  rel: \"stylesheet\"\n}));\n"],"names":["_createMdxContent","props","_components","Object","assign","h2","p","ul","li","code","pre","_provideComponents","components","CodeBox","id","component","Error","_missingMdxReference","React","names","className","wrapper","MDXLayout","shortcodes","Layout","_ref","pageContext","children","Header","AdventSideNav","list","href","year","puzz","title","MDXProvider","TryYourself","Footer","GatsbyMDXWrapper","GATSBY_COMPILED_MDX","Head","lang","rel"],"sourceRoot":""}